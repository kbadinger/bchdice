{"version":3,"file":"pure-cache.umd.js","sources":["../node_modules/mitt/dist/mitt.mjs","../src/constants/events.js","../src/utils/checkInstanceDisposal.js","../src/constants/inMemoryDefaultConfig.js","../src/inMemoryExpirer.js","../src/constants/pureCacheDefaultConfig.js","../src/pureCache.js"],"sourcesContent":["export default function(n){return{all:n=n||new Map,on:function(t,e){var i=n.get(t);i?i.push(e):n.set(t,[e])},off:function(t,e){var i=n.get(t);i&&(e?i.splice(i.indexOf(e)>>>0,1):n.set(t,[]))},emit:function(t,e){var i=n.get(t);i&&i.slice().map(function(n){n(e)}),(i=n.get(\"*\"))&&i.slice().map(function(n){n(t,e)})}}}\n//# sourceMappingURL=mitt.mjs.map\n","/**\n * Events list\n */\nexport default {\n  EXPIRY: \"expiry\",\n  ADD: \"add\",\n  GET: \"get\",\n  REMOVE: \"remove\",\n  CLEAR: \"clear\"\n};\n","const checkIfInstanceIsDisposed = instanceDisposed => {\n  if (instanceDisposed) {\n    throw new Error(\"Cannot use disposed instance.\");\n  }\n};\n\nexport default checkIfInstanceIsDisposed;\n","/**\n * In memory default config\n * */\nconst inMemoryDefaultConfig = {\n  // By default, check for cache expiry every 100 ms\n  // Reducing this value might create performance issues\n  expiryCheckInterval: 100\n};\n\nexport default inMemoryDefaultConfig;\n","import checkIfInstanceIsDisposed from \"./utils/checkInstanceDisposal\";\nimport defaultConfig from \"./constants/inMemoryDefaultConfig\";\n\n/**\n * Near realtime expiry handler\n *\n * queue Structure:\n *  {\n *    time1: [{key: key1, onExpire: () => {}}, {key: key2, onExpire: () => {}}],\n *    time2: [{key: key3, onExpire: () => {}}]\n *  }\n */\nclass InMemoryExpirer {\n  constructor(config = {}) {\n    // Configuration\n    this.config = { ...defaultConfig, ...config };\n\n    // Expirer queue\n    this.queue = {};\n\n    // Instance dispose status\n    this.disposed = false;\n\n    // Store last expired time to navigate from current expired time to last expired time\n    // Set initial value to current time - 1\n    // Don't set to 0 as expiry function will loop from current time to 0\n    this.lastExpiredTime = Date.now() - 1;\n\n    // Run the expiry function at every configured interval time\n    const { expiryCheckInterval } = this.config;\n    this.timer = setInterval(this.expire, expiryCheckInterval);\n  }\n\n  /**\n   * Expiry function\n   * */\n  expire = () => {\n    checkIfInstanceIsDisposed(this.disposed);\n\n    const time = Date.now();\n\n    for (let t = time; t >= this.lastExpiredTime; t -= 1) {\n      const toExpire = this.queue[t];\n\n      if (toExpire) {\n        delete this.queue[t];\n        toExpire.forEach(({ key, onExpire }) => onExpire(key));\n      }\n    }\n\n    this.lastExpiredTime = time;\n  };\n\n  /**\n   * Add to expiry queue\n   *\n   * @param {Number} time  When to expire\n   * @param {String} key key to store expiry data against\n   * @param {Function} onExpire Expiry callback, called when Date.now() ~= time\n   * */\n  add(time, key, onExpire) {\n    checkIfInstanceIsDisposed(this.disposed);\n\n    if (!this.queue[time]) {\n      this.queue[time] = [];\n    }\n\n    this.queue[time].push({ key, onExpire });\n\n    return true;\n  }\n\n  /**\n   * Remove specific key from expiry queue\n   *\n   * @param {Number} time  Expiry time\n   * @param {String} key key to remove from the expiry queue\n   * */\n  remove(time, key) {\n    checkIfInstanceIsDisposed(this.disposed);\n\n    const queue = this.queue[time];\n\n    if (queue) {\n      // Filter out keys in queue[time] which are matching current remove key\n      const filteredQueue = queue.filter(({ key: k }) => k !== key);\n      if (!filteredQueue.length) {\n        delete this.queue[time];\n      } else {\n        this.queue[time] = filteredQueue;\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Cleanup - Empty queue & clear expirer timer\n   * */\n  dispose() {\n    checkIfInstanceIsDisposed(this.disposed);\n\n    clearInterval(this.timer);\n    this.timer = null;\n    this.queue = {};\n    this.disposed = true;\n\n    return true;\n  }\n}\n\nexport default InMemoryExpirer;\n","/**\n * Pure cache default config\n * */\nconst pureCacheDefaultConfig = {\n  // Default cache expiry time, 60000ms(60s) by default\n  // Set `false` to disable expiry(This beats the purpose of cache, the data is store until the instance is disposed)\n  // Note: Falsy values like `0` will be treated as `false`\n  defaultCacheExpiryIn: 60000,\n  // By default, check for cache expiry every 100 ms\n  // Reducing this value might create performance issues\n  expiryCheckInterval: 100\n};\n\nexport default pureCacheDefaultConfig;\n","import mitt from \"mitt\";\nimport Events from \"./constants/events\";\nimport InMemoryExpirer from \"./inMemoryExpirer\";\nimport checkIfInstanceIsDisposed from \"./utils/checkInstanceDisposal\";\nimport defaultConfig from \"./constants/pureCacheDefaultConfig\";\n\n/**\n * pure-cache: Cache with confidence ðŸŽ‰ Ultra fast in-memory JavaScript cache with near realtime cache expiry feature âš¡\n *\n * cacheStore Structure:\n *    {\n *      key1: { value: value1, addedAt: 1527012874728, expiryAt: 1527012879729 },\n *      key2: { value: value2, addedAt: 1527012908893, expiryAt: 1527012909880 },\n *      ...\n *    }\n */\nclass PureCache {\n  constructor(config = {}, Expirer = InMemoryExpirer) {\n    // Configuration\n    this.config = { ...defaultConfig, ...config };\n\n    // Event listeners\n    const { on, off, emit } = mitt();\n    [this.on, this.off, this.emit] = [on, off, emit];\n\n    // Cache store\n    this.cacheStore = {};\n\n    // Instance dispose status\n    this.disposed = false;\n\n    // Create cache expirer instance, which maintains its own expiry queue\n    const { expiryCheckInterval } = this.config;\n    this.cacheExpirer = new Expirer({ expiryCheckInterval });\n  }\n\n  /**\n   * Put data into the cache\n   *\n   * @param {String} key  Cache key\n   * @param {String|Object|*} value Value to be stored against cache key\n   * @param {Number} expiryIn Expiry time(in ms from now), defaults to `60000ms(60s)`,\n   *                          if set to falsy values(like `0` & `false`), cache will\n   *                          act as simple in-memory data store and data is never expired for the key\n   *\n   * @returns {Object} Newly added Object({ value, addedAt, expiryAt }) with `value` key consists of actual data\n   * */\n  put(key = \"\", value = \"\", expiryIn = this.config.defaultCacheExpiryIn) {\n    checkIfInstanceIsDisposed(this.disposed);\n\n    // Remove existing values in the key(if any)\n    if (this.cacheStore[key]) {\n      this.remove(key);\n    }\n\n    const addedAt = Date.now();\n    // Ignore all falsy values(like `0` & `false`)\n    // Basically if there is no expiry, cache will act as simple in-memory data store\n    const expiryAt = expiryIn ? addedAt + expiryIn : null;\n    const target = { value, addedAt, expiryAt };\n    this.cacheStore[key] = target;\n\n    // If expiry time exists, add to expiry queue\n    if (expiryAt) {\n      // Remove value from cache and trigger expiry event\n      const onExpire = () => {\n        this.remove(key);\n        this.emit(Events.EXPIRY, {\n          key,\n          data: this.cacheStore[key]\n        });\n      };\n\n      this.cacheExpirer.add(expiryAt, key, onExpire);\n    }\n    this.emit(Events.ADD, { key, data: target });\n\n    return target;\n  }\n\n  /**\n   * Get data from the cache\n   *\n   * @param {String} key  Cache key\n   *\n   * @returns {Object|null} If `key` found, returns Object({ value, addedAt, expiryAt })\n   *                        with `value` key consists of actual data, else returns `null`\n   * */\n  get(key = \"\") {\n    checkIfInstanceIsDisposed(this.disposed);\n\n    const target = this.cacheStore[key];\n\n    if (target) {\n      this.emit(Events.GET, { key, data: target });\n      return target;\n    }\n\n    return null;\n  }\n\n  /**\n   * Remove data from the cache\n   *\n   * @param {String} key  Cache key to be removed from the cache\n   *\n   * @returns {Boolean} If `key` found, returns `true`,else returns `false`\n   * */\n  remove(key) {\n    checkIfInstanceIsDisposed(this.disposed);\n\n    const target = this.cacheStore[key];\n\n    if (target) {\n      // Remove key & value from cache\n      delete this.cacheStore[key];\n      const { expiryAt } = target;\n      // If timer exists for the key, remove it\n      this.cacheExpirer.remove(expiryAt, key);\n      this.emit(Events.REMOVE, { key, data: target });\n\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Cleanup - Clear entire cache & stop expirer\n   *\n   * @returns {Boolean} Returns `true`\n   * */\n  dispose() {\n    checkIfInstanceIsDisposed(this.disposed);\n\n    Object.keys(this.cacheStore).forEach(key => this.remove(key));\n    this.emit(Events.CLEAR, {});\n    this.cacheExpirer.dispose();\n    this.disposed = true;\n\n    return true;\n  }\n}\n\nexport default PureCache;\n"],"names":["n","all","Map","on","t","e","i","get","push","set","off","splice","indexOf","emit","slice","map","checkIfInstanceIsDisposed","instanceDisposed","Error","inMemoryDefaultConfig","expiryCheckInterval","InMemoryExpirer","config","_this","disposed","time","Date","now","lastExpiredTime","toExpire","queue","forEach","key","onExpire","defaultConfig","this","timer","setInterval","expire","filteredQueue","filter","length","clearInterval","pureCacheDefaultConfig","defaultCacheExpiryIn","Expirer","mitt","cacheStore","cacheExpirer","value","expiryIn","remove","addedAt","expiryAt","target","Events","data","add","Object","keys","_this2","dispose"],"mappings":"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"}