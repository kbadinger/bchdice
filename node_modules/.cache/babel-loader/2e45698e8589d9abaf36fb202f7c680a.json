{"ast":null,"code":"var _jsxFileName = \"/Users/kevinbadinger/eos/reactdemo/WCWReact/src/components/droplist.jsx\";\nimport { JsonRpc } from \"eosjs\";\nimport { deserialize, ObjectSchema } from \"atomicassets\";\nimport React, { StrictMode, useEffect, useState } from \"react\";\nimport { Button, Card, CardMedia, CardHeader, Typography, CardContent, Grid } from \"@material-ui/core\";\nimport Form from \"react-bootstrap/Form\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./droplist.css\";\nimport { parseJsonText } from \"typescript\";\nconst defaultState = {\n  activeUser: null,\n  accountName: \"\",\n  dropItems: \"\",\n  drops: [],\n  statusDisplay: \"\"\n};\nvar ourNetwork = {\n  chainId: \"1064487b3cd1a897ce03ae5b6a865651747e2e152090f99c1d19d44e01aea5a4\",\n  rpcEndpoints: [{\n    protocol: \"https\",\n    host: \"chain.wax.io\",\n    port: \"\"\n  }]\n};\nconst picture = {\n  height: \"150px\",\n  width: \"150px\"\n}; //This is hardcoded to the exchange rate, the appropriate thing is to call the delphi oracle to get the median exchange rate.\n//https://wax.bloks.io/account/delphioracle?loadContract=true&tab=Tables&table=datapoints&account=delphioracle&scope=waxpusd&limit=1\n\nconst WaxUsd = 0.13;\n\nclass DropListApp extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.renderLogoutBtn = () => {\n      const {\n        ual: {\n          activeUser,\n          activeAuthenticator,\n          logout\n        }\n      } = this.props;\n\n      if (!!activeUser && !!activeAuthenticator) {\n        return /*#__PURE__*/React.createElement(\"p\", {\n          className: \"ual-btn-wrapper\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 9\n          }\n        }, /*#__PURE__*/React.createElement(Button, {\n          onClick: logout,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 11\n          }\n        }, \"Logout\"));\n      }\n    };\n\n    this.handleDropUpdate = event => {\n      this.setState({\n        dropItems: event.target.value\n      }); //Need to update the drop list with with changed drop_id.  Pull the drops again and set the new state.\n    };\n\n    this.renderDropForm = () => {\n      const {\n        dropItems\n      } = this.state;\n      const part = this.partition;\n      const rpc = this.state.rpc;\n      const bd = this.buyDrop;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          marginLeft: \"auto\",\n          marginRight: \"auto\",\n          width: \"25%\",\n          marginTop: \"40px\",\n          marginBottom: \"10px\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(Form, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Form.Group, {\n        controlId: \"dropItems\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Form.Label, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 343,\n          columnNumber: 13\n        }\n      }, \"Wallet:\"), /*#__PURE__*/React.createElement(Form.Control, {\n        type: \"text\",\n        name: \"dropItems\",\n        value: dropItems,\n        onChange: this.handleDropUpdate,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 344,\n          columnNumber: 13\n        }\n      })), /*#__PURE__*/React.createElement(Typography, {\n        variant: \"subtitle2\",\n        component: \"h2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 11\n        }\n      }, this.state.statusDisplay)), /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          textAlign: \"center\",\n          marginLeft: \"-250px\",\n          paddingBottom: \"50px\",\n          paddingTop: \"25px\",\n          width: \"900px\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 357,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"h3\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 366,\n          columnNumber: 11\n        }\n      }, \"Drops\"), /*#__PURE__*/React.createElement(Grid, {\n        container: true,\n        spacing: 4,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 367,\n          columnNumber: 11\n        }\n      }, this.state.drops.map(function (item, i) {\n        var _item$collection_name, _item$drop_id;\n\n        var desc = \"\";\n        var d1 = new Date(item.start_time * 1000);\n        var std = \"Start: \" + (d1.getMonth() + 1) + \"/\" + d1.getDate() + \"/\" + d1.getFullYear() + \" \" + String(d1.getHours()).padStart(2, \"0\") + \":\" + String(d1.getMinutes()).padStart(2, \"0\") + \":\" + String(d1.getSeconds()).padStart(2, \"0\");\n        if (d1.getFullYear() < 1999) std = \"\";\n        d1 = new Date(item.end_time * 1000);\n        var etd = \"End: \" + (d1.getMonth() + 1) + \"/\" + d1.getDate() + \"/\" + d1.getFullYear() + \" \" + String(d1.getHours()).padStart(2, \"0\") + \":\" + String(d1.getMinutes()).padStart(2, \"0\") + \":\" + String(d1.getSeconds()).padStart(2, \"0\");\n        if (d1.getFullYear() < 1999) etd = \"\";\n\n        if (item.display_data.length > 0) {\n          try {\n            desc = JSON.parse(item.display_data).description;\n          } catch (e) {\n            desc = item.display_data;\n          }\n        }\n\n        let img = \"\";\n\n        if (item.imgTag != null && item.imgTag.length > 0) {\n          img = /*#__PURE__*/React.createElement(\"img\", {\n            style: picture,\n            src: item.imgTag,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 418,\n              columnNumber: 23\n            }\n          });\n        }\n\n        return /*#__PURE__*/React.createElement(Grid, {\n          item: true,\n          xs: 12,\n          sm: 6,\n          md: 4,\n          key: item.drop_id,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 422,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(Card, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 423,\n            columnNumber: 19\n          }\n        }, /*#__PURE__*/React.createElement(CardHeader, {\n          title: (_item$collection_name = item.collection_name) !== null && _item$collection_name !== void 0 ? _item$collection_name : \"\",\n          subheader: (_item$drop_id = item.drop_id) !== null && _item$drop_id !== void 0 ? _item$drop_id : \"\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 424,\n            columnNumber: 21\n          }\n        }), /*#__PURE__*/React.createElement(CardContent, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 428,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(Typography, {\n          variant: \"subtitle2\",\n          component: \"h2\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 429,\n            columnNumber: 23\n          }\n        }, item.listing_price), /*#__PURE__*/React.createElement(Typography, {\n          variant: \"subtitle2\",\n          component: \"h2\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 433,\n            columnNumber: 23\n          }\n        }, std), /*#__PURE__*/React.createElement(Typography, {\n          variant: \"subtitle2\",\n          component: \"h2\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 437,\n            columnNumber: 23\n          }\n        }, etd), img, /*#__PURE__*/React.createElement(Typography, {\n          variant: \"body2\",\n          color: \"textSecondary\",\n          component: \"p\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 442,\n            columnNumber: 23\n          }\n        }, desc), /*#__PURE__*/React.createElement(Button, {\n          onClick: () => bd(item.drop_id, item.listing_price),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 450,\n            columnNumber: 23\n          }\n        }, \"Buy Drop\"))));\n      }))));\n    };\n\n    this.state = { ...defaultState,\n      rpc: new JsonRpc(`${ourNetwork.rpcEndpoints[0].protocol}://${ourNetwork.rpcEndpoints[0].host}`)\n    };\n    this.updateAccountName = this.updateAccountName.bind(this);\n    this.renderModalButton = this.renderModalButton.bind(this);\n    this.handleDropUpdate = this.handleDropUpdate.bind(this);\n    this.renderDropForm = this.renderDropForm.bind(this);\n    this.buyDrop = this.buyDrop.bind(this);\n    this.buyClaimContract = this.buyClaimContract.bind(this);\n\n    this.partition = (str, n) => {\n      var aa = [];\n      var i, l;\n\n      for (i = 0, l = str.length; i < l; i += n) {\n        aa.push(str.substr(i, n));\n      }\n\n      return aa;\n    };\n  }\n\n  componentDidMount() {\n    //Randomly starting with drop 78410\n    this._asyncRequest = this.state.rpc.get_table_rows({\n      json: true,\n      code: \"atomicdropsx\",\n      scope: \"atomicdropsx\",\n      table: \"drops\",\n      lower_bound: \"78410\",\n      limit: 100,\n      reverse: false,\n      show_payer: false\n    }).then(resp => {\n      this._asyncRequest = null;\n      console.log(resp.rows);\n      this.setState(state => ({ ...this.state,\n        drops: resp.rows\n      }));\n\n      for (let itemNdx in resp.rows) {\n        let item = resp.rows[itemNdx];\n\n        if (item.assets_to_mint != null) {\n          this.state.rpc.get_table_rows({\n            json: true,\n            code: \"atomicassets\",\n            scope: \"dracodice\",\n            table: \"schemas\",\n            lower_bound: \"329238\",\n            limit: 1,\n            reverse: false,\n            show_payer: false\n          }).then(resptempl => {\n            /*                this.state.drops[ix].ipfsArray =\n                              resptempl.rows[0].immutable_serialized_data;\n            \n                            this.state.rpc\n                              .get_table_rows({\n                                json: true,\n                                code: \"atomicassets\",\n                                scope: \"dracodice\",\n                                table: \"schemas\",\n                                lower_bound: \"329238\",\n                                limit: 1,\n                                reverse: false,\n                                show_payer: false,\n                              })\n                              .then((resschema) => {\n                                let ix = this.state.drops.findIndex(\n                                  (x) => x.drop_id == item.drop_id\n                                );\n            \n                                let drop = this.state.drops[ix];\n            */\n            //                  drop.schema = resschema.rows[0].format;\n            drop.imgTag = \"\";\n\n            if (drop.ipfsArray != null && drop.schema != null) {\n              let deserializedData = deserialize(drop.ipfsArray, ObjectSchema(\"image\")); //pulling ipfs data from ipfs.io.  ideally would implement a version.\n\n              if (deserializedData.img != null) {\n                drop.imgTag = \"https://ipfs.io/ipfs/\" + deserializedData.img;\n              }\n            } // this.state.drops[ix] = drop;\n\n\n            this.setState(state => ({ ...this.state,\n              drops: this.state.drops\n            })); //         });\n          });\n        }\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    if (this._asyncRequest) {\n      this._asyncRequest.cancel();\n    }\n  }\n\n  async buyDrop(buyId, pri) {\n    this.buyClaimContract(buyId, pri);\n  }\n\n  componentDidUpdate() {\n    const {\n      ual: {\n        activeUser\n      }\n    } = this.props;\n\n    if (activeUser && !this.state.activeUser) {\n      this.setState({\n        activeUser\n      }, this.updateAccountName);\n    } else if (!activeUser && this.state.activeUser) {\n      this.setState(defaultState);\n    }\n  }\n\n  async updateAccountName() {\n    try {\n      const accountName = await this.state.activeUser.getAccountName();\n      this.setState({\n        accountName\n      }, this.updateAccountBalance);\n    } catch (e) {\n      console.warn(e);\n    }\n  }\n\n  renderModalButton() {\n    return /*#__PURE__*/React.createElement(\"p\", {\n      className: \"ual-btn-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 7\n      }\n    });\n  }\n\n  async buyClaimContract(buyId, pri) {\n    const {\n      accountName,\n      activeUser\n    } = this.state;\n\n    const roundOne = (n, d) => Math.round(n * Math.pow(10, d)) / Math.pow(10, d);\n\n    var buyString = pri;\n    var delphi = 0;\n\n    if (buyString.includes(\"USD\")) {\n      //For drops that are USD, need to convert the USD price to WAXP.  Using the estimated hard coded exchange rate from WaxUsd.  Will fail if this is not close enough.\n      var priAmt = buyString.split(\" \")[0];\n      var waxP = priAmt / WaxUsd;\n      var waxP = waxP + 0.5;\n      var waxP = roundOne(waxP, 8);\n      var s = waxP.toString();\n      if (s.indexOf(\".\") == -1) s += \".\";\n\n      while (s.length < s.indexOf(\".\") + 9) s += \"0\";\n\n      waxP = s;\n      waxP = waxP + \" WAX\";\n      delphi = WaxUsd;\n      console.log(waxP);\n    }\n\n    const orderTransaction = {\n      actions: [{\n        account: \"eosio.token\",\n        name: \"transfer\",\n        authorization: [{\n          actor: accountName,\n          permission: activeUser.requestPermission\n        }],\n        data: {\n          from: accountName,\n          to: \"atomicdropsx\",\n          quantity: buyString,\n          memo: \"deposit\"\n        }\n      }]\n    };\n\n    try {\n      const account = await this.state.rpc.get_account(accountName);\n      await activeUser.signTransaction(orderTransaction, {\n        blocksBehind: 3,\n        expireSeconds: 15\n      });\n      const claimTransaction = {\n        actions: [{\n          account: \"atomicdropsx\",\n          name: \"claimdrop\",\n          authorization: [{\n            actor: accountName,\n            permission: activeUser.requestPermission\n          }],\n          data: {\n            claimer: accountName,\n            drop_id: buyId,\n            claim_amount: 1,\n            intended_delphi_median: delphi,\n            referrer: \"atomicdrop\",\n            country: \"US\"\n          }\n        }]\n      };\n      await activeUser.signTransaction(claimTransaction, {\n        blocksBehind: 3,\n        expireSeconds: 15\n      });\n    } catch (error) {\n      console.warn(error);\n    }\n  }\n\n  render() {\n    let modalButton = this.renderModalButton();\n    let loggedIn = \"\";\n    let logoutButton = null; // Once UAL wrapper is implemented, uncomment below lines\n\n    const {\n      ual: {\n        activeUser\n      }\n    } = this.props;\n    const {\n      accountName\n    } = this.state;\n    modalButton = !activeUser && this.renderModalButton();\n    logoutButton = this.renderLogoutBtn();\n    loggedIn = accountName ? `Logged in as ${accountName}` : \"\";\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        textAlign: \"center\",\n        paddingTop: \"50px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 482,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 483,\n        columnNumber: 9\n      }\n    }, \"WAX Atomic Drop Demo\"), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 484,\n        columnNumber: 9\n      }\n    }, \"ReactJS hack\"), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        marginBottom: \"20px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 485,\n        columnNumber: 9\n      }\n    }), modalButton, /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"ual-subtitle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 487,\n        columnNumber: 9\n      }\n    }, loggedIn), this.renderDropForm(), logoutButton);\n  }\n\n}\n\nDropListApp.displayName = \"BCH Draco collection\";\nexport default DropListApp;","map":{"version":3,"sources":["/Users/kevinbadinger/eos/reactdemo/WCWReact/src/components/droplist.jsx"],"names":["JsonRpc","deserialize","ObjectSchema","React","StrictMode","useEffect","useState","Button","Card","CardMedia","CardHeader","Typography","CardContent","Grid","Form","parseJsonText","defaultState","activeUser","accountName","dropItems","drops","statusDisplay","ourNetwork","chainId","rpcEndpoints","protocol","host","port","picture","height","width","WaxUsd","DropListApp","Component","constructor","props","renderLogoutBtn","ual","activeAuthenticator","logout","handleDropUpdate","event","setState","target","value","renderDropForm","state","part","partition","rpc","bd","buyDrop","marginLeft","marginRight","marginTop","marginBottom","textAlign","paddingBottom","paddingTop","map","item","i","desc","d1","Date","start_time","std","getMonth","getDate","getFullYear","String","getHours","padStart","getMinutes","getSeconds","end_time","etd","display_data","length","JSON","parse","description","e","img","imgTag","drop_id","collection_name","listing_price","updateAccountName","bind","renderModalButton","buyClaimContract","str","n","aa","l","push","substr","componentDidMount","_asyncRequest","get_table_rows","json","code","scope","table","lower_bound","limit","reverse","show_payer","then","resp","console","log","rows","itemNdx","assets_to_mint","resptempl","drop","ipfsArray","schema","deserializedData","componentWillUnmount","cancel","buyId","pri","componentDidUpdate","getAccountName","updateAccountBalance","warn","roundOne","d","Math","round","pow","buyString","delphi","includes","priAmt","split","waxP","s","toString","indexOf","orderTransaction","actions","account","name","authorization","actor","permission","requestPermission","data","from","to","quantity","memo","get_account","signTransaction","blocksBehind","expireSeconds","claimTransaction","claimer","claim_amount","intended_delphi_median","referrer","country","error","render","modalButton","loggedIn","logoutButton","displayName"],"mappings":"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","sourcesContent":["import { JsonRpc } from \"eosjs\";\nimport { deserialize, ObjectSchema } from \"atomicassets\";\nimport React, { StrictMode, useEffect, useState } from \"react\";\nimport {\n  Button,\n  Card,\n  CardMedia,\n  CardHeader,\n  Typography,\n  CardContent,\n  Grid,\n} from \"@material-ui/core\";\nimport Form from \"react-bootstrap/Form\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./droplist.css\";\nimport { parseJsonText } from \"typescript\";\n\nconst defaultState = {\n  activeUser: null, \n  accountName: \"\",\n  dropItems: \"\",\n  drops: [],\n  statusDisplay: \"\",\n};\n\nvar ourNetwork = {\n  chainId: \"1064487b3cd1a897ce03ae5b6a865651747e2e152090f99c1d19d44e01aea5a4\",\n  rpcEndpoints: [{ protocol: \"https\", host: \"chain.wax.io\", port: \"\" }],\n};\n\nconst picture = {\n  height: \"150px\",\n  width: \"150px\",\n};\n\n//This is hardcoded to the exchange rate, the appropriate thing is to call the delphi oracle to get the median exchange rate.\n//https://wax.bloks.io/account/delphioracle?loadContract=true&tab=Tables&table=datapoints&account=delphioracle&scope=waxpusd&limit=1\n\nconst WaxUsd = 0.13;\n\nclass DropListApp extends React.Component {\n\n  static displayName = \"BCH Draco collection\";\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      ...defaultState,\n      rpc: new JsonRpc(\n        `${ourNetwork.rpcEndpoints[0].protocol}://${ourNetwork.rpcEndpoints[0].host}`\n      ),\n    };\n\n    this.updateAccountName = this.updateAccountName.bind(this);\n    this.renderModalButton = this.renderModalButton.bind(this);\n    this.handleDropUpdate = this.handleDropUpdate.bind(this);\n    this.renderDropForm = this.renderDropForm.bind(this);\n    this.buyDrop = this.buyDrop.bind(this);\n    this.buyClaimContract = this.buyClaimContract.bind(this);\n\n    this.partition = (str, n) => {\n      var aa = [];\n      var i, l;\n      for (i = 0, l = str.length; i < l; i += n) {\n        aa.push(str.substr(i, n));\n      }\n      return aa;\n    };\n  }\n\n  componentDidMount() {\n\n//Randomly starting with drop 78410\n\n    this._asyncRequest = this.state.rpc\n      .get_table_rows({\n        json: true,\n        code: \"atomicdropsx\",\n        scope: \"atomicdropsx\",\n        table: \"drops\",\n        lower_bound: \"78410\",\n        limit: 100,\n        reverse: false,\n        show_payer: false,\n      })\n      .then((resp) => {\n        this._asyncRequest = null;\n        console.log(resp.rows);\n\n        this.setState((state) => ({\n          ...this.state,\n          drops: resp.rows,\n        }));\n\n        for (let itemNdx in resp.rows) {\n          let item = resp.rows[itemNdx];\n\n          if (item.assets_to_mint != null) {\n            this.state.rpc\n              .get_table_rows({\n                json: true,\n                code: \"atomicassets\",\n                scope: \"dracodice\",\n                table: \"schemas\",\n                lower_bound: \"329238\",\n                limit: 1,\n                reverse: false,\n                show_payer: false,\n              })\n              .then((resptempl) => {\n              \n/*                this.state.drops[ix].ipfsArray =\n                  resptempl.rows[0].immutable_serialized_data;\n\n                this.state.rpc\n                  .get_table_rows({\n                    json: true,\n                    code: \"atomicassets\",\n                    scope: \"dracodice\",\n                    table: \"schemas\",\n                    lower_bound: \"329238\",\n                    limit: 1,\n                    reverse: false,\n                    show_payer: false,\n                  })\n                  .then((resschema) => {\n                    let ix = this.state.drops.findIndex(\n                      (x) => x.drop_id == item.drop_id\n                    );\n\n                    let drop = this.state.drops[ix];\n*/\n  //                  drop.schema = resschema.rows[0].format;\n\n                    drop.imgTag = \"\";\n\n                    if (drop.ipfsArray != null && drop.schema != null) {\n                      let deserializedData = deserialize(\n                        drop.ipfsArray,\n                        ObjectSchema(\"image\")\n                      );\n\n                      //pulling ipfs data from ipfs.io.  ideally would implement a version.\n\n                      if (deserializedData.img != null) {\n                        drop.imgTag =\n                          \"https://ipfs.io/ipfs/\" + deserializedData.img;\n                      }\n                    }\n\n                   // this.state.drops[ix] = drop;\n\n                    this.setState((state) => ({\n                      ...this.state,\n                      drops: this.state.drops,\n                    }));\n         //         });\n              });\n          }\n        }\n      });\n  }\n\n  componentWillUnmount() {\n    if (this._asyncRequest) {\n      this._asyncRequest.cancel();\n    }\n  }\n\n  async buyDrop(buyId, pri) {\n    this.buyClaimContract(buyId, pri);\n\n  }\n\n  componentDidUpdate() {\n    const {\n      ual: { activeUser },\n    } = this.props;\n    if (activeUser && !this.state.activeUser) {\n      this.setState({ activeUser }, this.updateAccountName);\n    } else if (!activeUser && this.state.activeUser) {\n      this.setState(defaultState);\n    }\n  }\n\n  async updateAccountName() {\n    try {\n      const accountName = await this.state.activeUser.getAccountName();\n      this.setState({ accountName }, this.updateAccountBalance);\n    } catch (e) {\n      console.warn(e);\n    }\n  }\n\n  renderLogoutBtn = () => {\n    const {\n      ual: { activeUser, activeAuthenticator, logout },\n    } = this.props;\n    if (!!activeUser && !!activeAuthenticator) {\n      return (\n        <p className=\"ual-btn-wrapper\">\n          <Button onClick={logout}>{\"Logout\"}</Button>\n        </p>\n      );\n    }\n  };\n\n  renderModalButton() {\n    return (\n      <p className=\"ual-btn-wrapper\">\n        \n      </p>\n    );\n  }\n\n  handleDropUpdate = (event) => {\n    this.setState({ dropItems: event.target.value });\n\n    //Need to update the drop list with with changed drop_id.  Pull the drops again and set the new state.\n  };\n\n  async buyClaimContract(buyId, pri) {\n    const { accountName, activeUser } = this.state;\n\n    const roundOne = (n, d) =>\n      Math.round(n * Math.pow(10, d)) / Math.pow(10, d);\n\n    var buyString = pri;\n\n    var delphi = 0;\n\n    if (buyString.includes(\"USD\")) {\n\n      //For drops that are USD, need to convert the USD price to WAXP.  Using the estimated hard coded exchange rate from WaxUsd.  Will fail if this is not close enough.\n\n      var priAmt = buyString.split(\" \")[0];\n\n      var waxP = priAmt / WaxUsd;\n\n      var waxP = waxP + 0.5;\n\n      var waxP = roundOne(waxP, 8);\n\n      var s = waxP.toString();\n      if (s.indexOf(\".\") == -1) s += \".\";\n\n      while (s.length < s.indexOf(\".\") + 9) s += \"0\";\n\n      waxP = s;\n\n      waxP = waxP + \" WAX\";\n\n      delphi = WaxUsd;\n\n      console.log(waxP);\n    }\n\n\n    const orderTransaction = {\n      actions: [\n        {\n          account: \"eosio.token\",\n          name: \"transfer\",\n          authorization: [\n            {\n              actor: accountName,\n              permission: activeUser.requestPermission,\n            },\n          ],\n          data: {\n            from: accountName,\n            to: \"atomicdropsx\",\n            quantity: buyString,\n            memo: \"deposit\",\n          },\n        },\n      ],\n    };\n\n    try {\n      const account = await this.state.rpc.get_account(accountName);\n\n      await activeUser.signTransaction(orderTransaction, {\n        blocksBehind: 3,\n        expireSeconds: 15,\n      });\n\n\n      const claimTransaction = {\n        actions: [\n          {\n            account: \"atomicdropsx\",\n            name: \"claimdrop\",\n            authorization: [\n              {\n                actor: accountName,\n                permission: activeUser.requestPermission,\n              },\n            ],\n            data: {\n              claimer: accountName,\n              drop_id: buyId,\n              claim_amount: 1,\n              intended_delphi_median: delphi,\n              referrer: \"atomicdrop\",\n              country: \"US\",\n            },\n          },\n        ],\n      };\n\n      await activeUser.signTransaction(claimTransaction, {\n        blocksBehind: 3,\n        expireSeconds: 15,\n      });\n\n    } catch (error) {\n      console.warn(error);\n    }\n  }\n\n  renderDropForm = () => {\n    const { dropItems } = this.state;\n\n    const part = this.partition;\n\n    const rpc = this.state.rpc;\n\n    const bd = this.buyDrop;\n\n    return (\n      <div\n        style={{\n          marginLeft: \"auto\",\n          marginRight: \"auto\",\n          width: \"25%\",\n          marginTop: \"40px\",\n          marginBottom: \"10px\",\n        }}\n      >\n        <Form>\n          <Form.Group controlId=\"dropItems\">\n            <Form.Label>Wallet:</Form.Label>\n            <Form.Control\n              type=\"text\"\n              name=\"dropItems\"\n              value={dropItems}\n              onChange={this.handleDropUpdate}\n            />\n          </Form.Group>\n\n          <Typography variant=\"subtitle2\" component=\"h2\">\n            {this.state.statusDisplay}\n          </Typography>\n        </Form>\n\n        <div\n          style={{\n            textAlign: \"center\",\n            marginLeft: \"-250px\",\n            paddingBottom: \"50px\",\n            paddingTop: \"25px\",\n            width: \"900px\",\n          }}\n        >\n          <h3>Drops</h3>\n          <Grid container spacing={4}>\n            {this.state.drops.map(function (item, i) {\n              var desc = \"\";\n\n              var d1 = new Date(item.start_time * 1000);\n\n              var std =\n                \"Start: \" +\n                (d1.getMonth() + 1) +\n                \"/\" +\n                d1.getDate() +\n                \"/\" +\n                d1.getFullYear() +\n                \" \" +\n                String(d1.getHours()).padStart(2, \"0\") +\n                \":\" +\n                String(d1.getMinutes()).padStart(2, \"0\") +\n                \":\" +\n                String(d1.getSeconds()).padStart(2, \"0\");\n\n              if (d1.getFullYear() < 1999) std = \"\";\n\n              d1 = new Date(item.end_time * 1000);\n\n              var etd =\n                \"End: \" +\n                (d1.getMonth() + 1) +\n                \"/\" +\n                d1.getDate() +\n                \"/\" +\n                d1.getFullYear() +\n                \" \" +\n                String(d1.getHours()).padStart(2, \"0\") +\n                \":\" +\n                String(d1.getMinutes()).padStart(2, \"0\") +\n                \":\" +\n                String(d1.getSeconds()).padStart(2, \"0\");\n\n              if (d1.getFullYear() < 1999) etd = \"\";\n\n              if (item.display_data.length > 0) {\n                try {\n                  desc = JSON.parse(item.display_data).description;\n                } catch (e) {\n                  desc = item.display_data;\n                }\n              }\n\n              let img = \"\";\n\n              if (item.imgTag != null && item.imgTag.length > 0) {\n                img = <img style={picture} src={item.imgTag} />;\n              }\n\n              return (\n                <Grid item xs={12} sm={6} md={4} key={item.drop_id}>\n                  <Card>\n                    <CardHeader\n                      title={item.collection_name ?? \"\"}\n                      subheader={item.drop_id ?? \"\"}\n                    />\n                    <CardContent>\n                      <Typography variant=\"subtitle2\" component=\"h2\">\n                        {item.listing_price}\n                      </Typography>\n\n                      <Typography variant=\"subtitle2\" component=\"h2\">\n                        {std}\n                      </Typography>\n\n                      <Typography variant=\"subtitle2\" component=\"h2\">\n                        {etd}\n                      </Typography>\n\n                      {img}\n                      <Typography\n                        variant=\"body2\"\n                        color=\"textSecondary\"\n                        component=\"p\"\n                      >\n                        {desc}\n                      </Typography>\n\n                      <Button\n                        onClick={() => bd(item.drop_id, item.listing_price)}\n                      >\n                        {\"Buy Drop\"}\n                      </Button>\n                    </CardContent>\n                  </Card>\n                </Grid>\n              );\n            })}\n          </Grid>\n        </div>\n      </div>\n    );\n  };\n\n  render() {\n    let modalButton = this.renderModalButton();\n    let loggedIn = \"\";\n    let logoutButton = null;\n\n    // Once UAL wrapper is implemented, uncomment below lines\n\n    const {\n      ual: { activeUser },\n    } = this.props;\n    const { accountName } = this.state;\n    modalButton = !activeUser && this.renderModalButton();\n    logoutButton = this.renderLogoutBtn();\n    loggedIn = accountName ? `Logged in as ${accountName}` : \"\";\n\n    return (\n      <div style={{ textAlign: \"center\", paddingTop: \"50px\" }}>\n        <h2>WAX Atomic Drop Demo</h2>\n        <span>ReactJS hack</span>\n        <div style={{ marginBottom: \"20px\" }}></div>\n        {modalButton}\n        <h3 className=\"ual-subtitle\">{loggedIn}</h3>\n        {this.renderDropForm()}\n        {logoutButton}\n      </div>\n    );\n  }\n}\n\nexport default DropListApp;\n"]},"metadata":{},"sourceType":"module"}