{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst Generator_1 = require(\"./Generator\");\n/* tslint:disable:variable-name */\n\n\nclass RpcActionGenerator extends Generator_1.ActionGenerator {\n  constructor(api) {\n    super(api.contract);\n    this.api = api;\n  }\n\n  async createcol(authorization, author, collection_name, allow_notify, authorized_accounts, notify_accounts, market_fee, data) {\n    const config = await this.api.config();\n    return super.createcol(authorization, author, collection_name, allow_notify, authorized_accounts, notify_accounts, market_fee, Generator_1.toAttributeMap(data, config.collection_format));\n  }\n\n  async createtempl(authorization, authorized_creator, collection_name, schema_name, transferable, burnable, max_supply, immutable_data) {\n    const schema = await this.api.getSchema(collection_name, schema_name);\n    const immutable_attribute_map = Generator_1.toAttributeMap(immutable_data, await schema.rawFormat());\n    return super.createtempl(authorization, authorized_creator, collection_name, schema_name, transferable, burnable, max_supply, immutable_attribute_map);\n  }\n\n  async mintasset(authorization, authorized_minter, collection_name, schema_name, template_id, new_owner, immutable_data, mutable_data, tokens_to_back) {\n    const template = await this.api.getTemplate(collection_name, template_id);\n    const immutable_attribute_map = Generator_1.toAttributeMap(immutable_data, await (await template.schema()).rawFormat());\n    const mutable_attribute_map = Generator_1.toAttributeMap(mutable_data, await (await template.schema()).rawFormat());\n    return super.mintasset(authorization, authorized_minter, collection_name, schema_name, template_id, new_owner, immutable_attribute_map, mutable_attribute_map, tokens_to_back);\n  }\n\n  async setassetdata(authorization, authorized_editor, owner, asset_id, mutable_data) {\n    const asset = await this.api.getAsset(owner, asset_id);\n    const schema = await asset.schema();\n    const mutable_attribute_map = Generator_1.toAttributeMap(mutable_data, await schema.rawFormat());\n    return super.setassetdata(authorization, authorized_editor, owner, asset_id, mutable_attribute_map);\n  }\n\n  async setcoldata(authorization, collection_name, data) {\n    const mdata = Generator_1.toAttributeMap(data, (await this.api.config()).collection_format);\n    return super.setcoldata(authorization, collection_name, mdata);\n  }\n\n}\n\nexports.default = RpcActionGenerator;","map":{"version":3,"sources":["/Users/kevinbadinger/eos/reactdemo/WCWReact/node_modules/atomicassets/build/Actions/Rpc.js"],"names":["Object","defineProperty","exports","value","Generator_1","require","RpcActionGenerator","ActionGenerator","constructor","api","contract","createcol","authorization","author","collection_name","allow_notify","authorized_accounts","notify_accounts","market_fee","data","config","toAttributeMap","collection_format","createtempl","authorized_creator","schema_name","transferable","burnable","max_supply","immutable_data","schema","getSchema","immutable_attribute_map","rawFormat","mintasset","authorized_minter","template_id","new_owner","mutable_data","tokens_to_back","template","getTemplate","mutable_attribute_map","setassetdata","authorized_editor","owner","asset_id","asset","getAsset","setcoldata","mdata","default"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Generator_1 = require(\"./Generator\");\n/* tslint:disable:variable-name */\nclass RpcActionGenerator extends Generator_1.ActionGenerator {\n    constructor(api) {\n        super(api.contract);\n        this.api = api;\n    }\n    async createcol(authorization, author, collection_name, allow_notify, authorized_accounts, notify_accounts, market_fee, data) {\n        const config = await this.api.config();\n        return super.createcol(authorization, author, collection_name, allow_notify, authorized_accounts, notify_accounts, market_fee, Generator_1.toAttributeMap(data, config.collection_format));\n    }\n    async createtempl(authorization, authorized_creator, collection_name, schema_name, transferable, burnable, max_supply, immutable_data) {\n        const schema = await this.api.getSchema(collection_name, schema_name);\n        const immutable_attribute_map = Generator_1.toAttributeMap(immutable_data, await schema.rawFormat());\n        return super.createtempl(authorization, authorized_creator, collection_name, schema_name, transferable, burnable, max_supply, immutable_attribute_map);\n    }\n    async mintasset(authorization, authorized_minter, collection_name, schema_name, template_id, new_owner, immutable_data, mutable_data, tokens_to_back) {\n        const template = await this.api.getTemplate(collection_name, template_id);\n        const immutable_attribute_map = Generator_1.toAttributeMap(immutable_data, await (await template.schema()).rawFormat());\n        const mutable_attribute_map = Generator_1.toAttributeMap(mutable_data, await (await template.schema()).rawFormat());\n        return super.mintasset(authorization, authorized_minter, collection_name, schema_name, template_id, new_owner, immutable_attribute_map, mutable_attribute_map, tokens_to_back);\n    }\n    async setassetdata(authorization, authorized_editor, owner, asset_id, mutable_data) {\n        const asset = await this.api.getAsset(owner, asset_id);\n        const schema = await asset.schema();\n        const mutable_attribute_map = Generator_1.toAttributeMap(mutable_data, await schema.rawFormat());\n        return super.setassetdata(authorization, authorized_editor, owner, asset_id, mutable_attribute_map);\n    }\n    async setcoldata(authorization, collection_name, data) {\n        const mdata = Generator_1.toAttributeMap(data, (await this.api.config()).collection_format);\n        return super.setcoldata(authorization, collection_name, mdata);\n    }\n}\nexports.default = RpcActionGenerator;\n"]},"metadata":{},"sourceType":"script"}