{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/kevinbadinger/eos/reactdemo/WCWReact/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/kevinbadinger/eos/reactdemo/WCWReact/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n}); // @ts-ignore\n\nvar pure_cache_1 = __importDefault(require(\"pure-cache\"));\n\nvar RpcCache = /*#__PURE__*/function () {\n  function RpcCache() {\n    _classCallCheck(this, RpcCache);\n\n    this.cache = new pure_cache_1.default({\n      expiryCheckInterval: 60 * 1000\n    });\n  }\n\n  _createClass(RpcCache, [{\n    key: \"getAsset\",\n    value: function getAsset(assetID, data) {\n      if (data) {\n        data.mutable_serialized_data = new Uint8Array(data.mutable_serialized_data);\n        data.immutable_serialized_data = new Uint8Array(data.immutable_serialized_data);\n      }\n\n      return this.access('assets', assetID, data);\n    }\n  }, {\n    key: \"deleteAsset\",\n    value: function deleteAsset(assetID) {\n      this.delete('assets', assetID);\n    }\n  }, {\n    key: \"getTemplate\",\n    value: function getTemplate(collectionName, templateID, data) {\n      if (data) {\n        data.immutable_serialized_data = new Uint8Array(data.immutable_serialized_data);\n      }\n\n      return this.access('templates', collectionName + ':' + templateID, data);\n    }\n  }, {\n    key: \"deleteTemplate\",\n    value: function deleteTemplate(collectionName, templateID) {\n      this.delete('templates', collectionName + ':' + templateID);\n    }\n  }, {\n    key: \"getSchema\",\n    value: function getSchema(collectionName, schemaName, data) {\n      return this.access('schemas', collectionName + ':' + schemaName, data);\n    }\n  }, {\n    key: \"deleteSchema\",\n    value: function deleteSchema(collectionName, schemaName) {\n      this.delete('schemas', collectionName + ':' + schemaName);\n    }\n  }, {\n    key: \"getCollection\",\n    value: function getCollection(collectionName, data) {\n      return this.access('collections', collectionName, data);\n    }\n  }, {\n    key: \"deleteCollection\",\n    value: function deleteCollection(collectionName) {\n      this.delete('collections', collectionName);\n    }\n  }, {\n    key: \"getOffer\",\n    value: function getOffer(offerID, data) {\n      return this.access('offers', offerID, data);\n    }\n  }, {\n    key: \"deleteOffer\",\n    value: function deleteOffer(offerID) {\n      this.delete('offers', offerID);\n    }\n  }, {\n    key: \"access\",\n    value: function access(namespace, identifier, data) {\n      if (typeof data === 'undefined') {\n        var cache = this.cache.get(namespace + ':' + identifier);\n        return cache === null ? null : cache.value;\n      }\n\n      this.cache.put(namespace + ':' + identifier, data, 15 * 60 * 1000);\n      return data;\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(namespace, identifier) {\n      this.cache.remove(namespace + ':' + identifier);\n    }\n  }]);\n\n  return RpcCache;\n}();\n\nexports.default = RpcCache;","map":{"version":3,"sources":["/Users/kevinbadinger/eos/reactdemo/WCWReact/node_modules/atomicassets/build/API/Rpc/Cache.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","pure_cache_1","require","RpcCache","cache","default","expiryCheckInterval","assetID","data","mutable_serialized_data","Uint8Array","immutable_serialized_data","access","delete","collectionName","templateID","schemaName","offerID","namespace","identifier","get","put","remove"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// @ts-ignore\nconst pure_cache_1 = __importDefault(require(\"pure-cache\"));\nclass RpcCache {\n    constructor() {\n        this.cache = new pure_cache_1.default({ expiryCheckInterval: 60 * 1000 });\n    }\n    getAsset(assetID, data) {\n        if (data) {\n            data.mutable_serialized_data = new Uint8Array(data.mutable_serialized_data);\n            data.immutable_serialized_data = new Uint8Array(data.immutable_serialized_data);\n        }\n        return this.access('assets', assetID, data);\n    }\n    deleteAsset(assetID) {\n        this.delete('assets', assetID);\n    }\n    getTemplate(collectionName, templateID, data) {\n        if (data) {\n            data.immutable_serialized_data = new Uint8Array(data.immutable_serialized_data);\n        }\n        return this.access('templates', collectionName + ':' + templateID, data);\n    }\n    deleteTemplate(collectionName, templateID) {\n        this.delete('templates', collectionName + ':' + templateID);\n    }\n    getSchema(collectionName, schemaName, data) {\n        return this.access('schemas', collectionName + ':' + schemaName, data);\n    }\n    deleteSchema(collectionName, schemaName) {\n        this.delete('schemas', collectionName + ':' + schemaName);\n    }\n    getCollection(collectionName, data) {\n        return this.access('collections', collectionName, data);\n    }\n    deleteCollection(collectionName) {\n        this.delete('collections', collectionName);\n    }\n    getOffer(offerID, data) {\n        return this.access('offers', offerID, data);\n    }\n    deleteOffer(offerID) {\n        this.delete('offers', offerID);\n    }\n    access(namespace, identifier, data) {\n        if (typeof data === 'undefined') {\n            const cache = this.cache.get(namespace + ':' + identifier);\n            return cache === null ? null : cache.value;\n        }\n        this.cache.put(namespace + ':' + identifier, data, 15 * 60 * 1000);\n        return data;\n    }\n    delete(namespace, identifier) {\n        this.cache.remove(namespace + ':' + identifier);\n    }\n}\nexports.default = RpcCache;\n"]},"metadata":{},"sourceType":"script"}