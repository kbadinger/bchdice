{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst Asset_1 = __importDefault(require(\"./Asset\"));\n\nclass RpcOffer {\n  constructor(api, id, data, senderAssets, receiverAssets, cache = true) {\n    this.api = api;\n    this.id = id;\n    this._data = new Promise(async (resolve, reject) => {\n      if (data) {\n        resolve(data);\n      } else {\n        try {\n          resolve(await this.api.queue.fetchOffer(id, cache));\n        } catch (e) {\n          reject(e);\n        }\n      }\n    });\n    this._senderAssets = new Promise(async (resolve, reject) => {\n      if (senderAssets) {\n        resolve(senderAssets);\n      } else {\n        try {\n          const row = await this._data;\n          const inventory = await this.api.queue.fetchAccountAssets(row.sender);\n          return resolve(row.sender_asset_ids.map(assetID => {\n            const asset = inventory.find(assetRow => assetRow.asset_id === assetID);\n            return asset ? new Asset_1.default(this.api, row.sender, assetID, asset, undefined, undefined, undefined, cache) : assetID;\n          }));\n        } catch (e) {\n          return reject(e);\n        }\n      }\n    });\n    this._recipientAssets = new Promise(async (resolve, reject) => {\n      if (receiverAssets) {\n        resolve(receiverAssets);\n      } else {\n        try {\n          const row = await this._data;\n          const inventory = await this.api.queue.fetchAccountAssets(row.recipient);\n          return resolve(row.recipient_asset_ids.map(assetID => {\n            const asset = inventory.find(assetRow => assetRow.asset_id === assetID);\n            return asset ? new Asset_1.default(this.api, row.recipient, assetID, asset, undefined, undefined, undefined, cache) : assetID;\n          }));\n        } catch (e) {\n          return reject(e);\n        }\n      }\n    });\n  }\n\n  async sender() {\n    return (await this._data).sender;\n  }\n\n  async recipient() {\n    return (await this._data).recipient;\n  }\n\n  async senderAssets() {\n    return await this._senderAssets;\n  }\n\n  async recipientAssets() {\n    return await this._recipientAssets;\n  }\n\n  async memo() {\n    return (await this._data).memo;\n  }\n\n  async toObject() {\n    return {\n      offer_id: this.id,\n      sender: {\n        account: await this.sender(),\n        assets: await Promise.all((await this.senderAssets()).map(async asset => typeof asset === 'string' ? asset : await asset.toObject()))\n      },\n      recipient: {\n        account: await this.recipient(),\n        assets: await Promise.all((await this.recipientAssets()).map(async asset => typeof asset === 'string' ? asset : await asset.toObject()))\n      },\n      memo: await this.memo()\n    };\n  }\n\n}\n\nexports.default = RpcOffer;","map":{"version":3,"sources":["/Users/kevinbadinger/eos/reactdemo/WCWReact/node_modules/atomicassets/build/API/Rpc/Offer.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","Asset_1","require","RpcOffer","constructor","api","id","data","senderAssets","receiverAssets","cache","_data","Promise","resolve","reject","queue","fetchOffer","e","_senderAssets","row","inventory","fetchAccountAssets","sender","sender_asset_ids","map","assetID","asset","find","assetRow","asset_id","default","undefined","_recipientAssets","recipient","recipient_asset_ids","recipientAssets","memo","toObject","offer_id","account","assets","all"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Asset_1 = __importDefault(require(\"./Asset\"));\nclass RpcOffer {\n    constructor(api, id, data, senderAssets, receiverAssets, cache = true) {\n        this.api = api;\n        this.id = id;\n        this._data = new Promise(async (resolve, reject) => {\n            if (data) {\n                resolve(data);\n            }\n            else {\n                try {\n                    resolve(await this.api.queue.fetchOffer(id, cache));\n                }\n                catch (e) {\n                    reject(e);\n                }\n            }\n        });\n        this._senderAssets = new Promise(async (resolve, reject) => {\n            if (senderAssets) {\n                resolve(senderAssets);\n            }\n            else {\n                try {\n                    const row = await this._data;\n                    const inventory = await this.api.queue.fetchAccountAssets(row.sender);\n                    return resolve(row.sender_asset_ids.map((assetID) => {\n                        const asset = inventory.find((assetRow) => assetRow.asset_id === assetID);\n                        return asset ? new Asset_1.default(this.api, row.sender, assetID, asset, undefined, undefined, undefined, cache) : assetID;\n                    }));\n                }\n                catch (e) {\n                    return reject(e);\n                }\n            }\n        });\n        this._recipientAssets = new Promise(async (resolve, reject) => {\n            if (receiverAssets) {\n                resolve(receiverAssets);\n            }\n            else {\n                try {\n                    const row = await this._data;\n                    const inventory = await this.api.queue.fetchAccountAssets(row.recipient);\n                    return resolve(row.recipient_asset_ids.map((assetID) => {\n                        const asset = inventory.find((assetRow) => assetRow.asset_id === assetID);\n                        return asset ? new Asset_1.default(this.api, row.recipient, assetID, asset, undefined, undefined, undefined, cache) : assetID;\n                    }));\n                }\n                catch (e) {\n                    return reject(e);\n                }\n            }\n        });\n    }\n    async sender() {\n        return (await this._data).sender;\n    }\n    async recipient() {\n        return (await this._data).recipient;\n    }\n    async senderAssets() {\n        return await this._senderAssets;\n    }\n    async recipientAssets() {\n        return await this._recipientAssets;\n    }\n    async memo() {\n        return (await this._data).memo;\n    }\n    async toObject() {\n        return {\n            offer_id: this.id,\n            sender: {\n                account: await this.sender(),\n                assets: await Promise.all((await this.senderAssets()).map(async (asset) => typeof asset === 'string' ? asset : await asset.toObject()))\n            },\n            recipient: {\n                account: await this.recipient(),\n                assets: await Promise.all((await this.recipientAssets()).map(async (asset) => typeof asset === 'string' ? asset : await asset.toObject()))\n            },\n            memo: await this.memo()\n        };\n    }\n}\nexports.default = RpcOffer;\n"]},"metadata":{},"sourceType":"script"}