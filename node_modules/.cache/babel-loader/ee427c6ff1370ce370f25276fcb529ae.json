{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst universal_authenticator_library_1 = require(\"universal-authenticator-library\");\n\nconst UALWaxError_1 = require(\"./UALWaxError\");\n\nclass WaxUser extends universal_authenticator_library_1.User {\n  constructor(chain, userAccount, pubKeys, wax) {\n    super();\n    this.accountName = userAccount;\n    this.pubKeys = pubKeys;\n    this.requestPermission = 'active';\n    this.chain = chain;\n    this.wax = wax; // compatible features\n\n    this.api = wax.api;\n    this.rpc = wax.api && wax.api.rpc;\n  }\n  /**\n   * @param transaction  The transaction to be signed (a object that matches the RpcAPI structure).\n   * @param options  Options for tapos fields\n   */\n\n\n  async signTransaction(transaction, options) {\n    try {\n      const account = await this.wax.login();\n\n      if (account !== this.accountName) {\n        throw new Error('Account does not match the requested permission');\n      } else {\n        this.api = this.wax.api;\n        this.rpc = this.wax.api.rpc;\n      }\n\n      const completedTransaction = await this.wax.api.transact(transaction, options);\n      return this.returnEosjsTransaction(options.broadcast !== false, completedTransaction);\n    } catch (e) {\n      throw new UALWaxError_1.UALWaxError(e.message ? e.message : 'Unable to sign transaction', universal_authenticator_library_1.UALErrorType.Signing, e);\n    }\n  }\n\n  async signArbitrary() {\n    throw new UALWaxError_1.UALWaxError('WAX Cloud Wallet does not currently support signArbitrary', universal_authenticator_library_1.UALErrorType.Unsupported, null);\n  }\n\n  async verifyKeyOwnership() {\n    throw new UALWaxError_1.UALWaxError('WAX Cloud Wallet does not currently support verifyKeyOwnership', universal_authenticator_library_1.UALErrorType.Unsupported, null);\n  }\n\n  async getAccountName() {\n    return this.accountName;\n  }\n\n  async getChainId() {\n    return this.chain.chainId;\n  }\n\n  async getKeys() {\n    return this.pubKeys;\n  }\n\n}\n\nexports.WaxUser = WaxUser;","map":{"version":3,"sources":["/Users/kevinbadinger/eos/reactdemo/WCWReact/node_modules/@eosdacio/ual-wax/dist/WaxUser.js"],"names":["Object","defineProperty","exports","value","universal_authenticator_library_1","require","UALWaxError_1","WaxUser","User","constructor","chain","userAccount","pubKeys","wax","accountName","requestPermission","api","rpc","signTransaction","transaction","options","account","login","Error","completedTransaction","transact","returnEosjsTransaction","broadcast","e","UALWaxError","message","UALErrorType","Signing","signArbitrary","Unsupported","verifyKeyOwnership","getAccountName","getChainId","chainId","getKeys"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,iCAAiC,GAAGC,OAAO,CAAC,iCAAD,CAAjD;;AACA,MAAMC,aAAa,GAAGD,OAAO,CAAC,eAAD,CAA7B;;AACA,MAAME,OAAN,SAAsBH,iCAAiC,CAACI,IAAxD,CAA6D;AACzDC,EAAAA,WAAW,CAACC,KAAD,EAAQC,WAAR,EAAqBC,OAArB,EAA8BC,GAA9B,EAAmC;AAC1C;AACA,SAAKC,WAAL,GAAmBH,WAAnB;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAKG,iBAAL,GAAyB,QAAzB;AACA,SAAKL,KAAL,GAAaA,KAAb;AACA,SAAKG,GAAL,GAAWA,GAAX,CAN0C,CAO1C;;AACA,SAAKG,GAAL,GAAWH,GAAG,CAACG,GAAf;AACA,SAAKC,GAAL,GAAWJ,GAAG,CAACG,GAAJ,IAAWH,GAAG,CAACG,GAAJ,CAAQC,GAA9B;AACH;AACD;AACJ;AACA;AACA;;;AACyB,QAAfC,eAAe,CAACC,WAAD,EAAcC,OAAd,EAAuB;AACxC,QAAI;AACA,YAAMC,OAAO,GAAG,MAAM,KAAKR,GAAL,CAASS,KAAT,EAAtB;;AACA,UAAID,OAAO,KAAK,KAAKP,WAArB,EAAkC;AAC9B,cAAM,IAAIS,KAAJ,CAAU,iDAAV,CAAN;AACH,OAFD,MAGK;AACD,aAAKP,GAAL,GAAW,KAAKH,GAAL,CAASG,GAApB;AACA,aAAKC,GAAL,GAAW,KAAKJ,GAAL,CAASG,GAAT,CAAaC,GAAxB;AACH;;AACD,YAAMO,oBAAoB,GAAG,MAAM,KAAKX,GAAL,CAASG,GAAT,CAAaS,QAAb,CAAsBN,WAAtB,EAAmCC,OAAnC,CAAnC;AACA,aAAO,KAAKM,sBAAL,CAA4BN,OAAO,CAACO,SAAR,KAAsB,KAAlD,EAAyDH,oBAAzD,CAAP;AACH,KAXD,CAYA,OAAOI,CAAP,EAAU;AACN,YAAM,IAAItB,aAAa,CAACuB,WAAlB,CAA8BD,CAAC,CAACE,OAAF,GAAYF,CAAC,CAACE,OAAd,GAAwB,4BAAtD,EAAoF1B,iCAAiC,CAAC2B,YAAlC,CAA+CC,OAAnI,EAA4IJ,CAA5I,CAAN;AACH;AACJ;;AACkB,QAAbK,aAAa,GAAG;AAClB,UAAM,IAAI3B,aAAa,CAACuB,WAAlB,CAA8B,2DAA9B,EAA2FzB,iCAAiC,CAAC2B,YAAlC,CAA+CG,WAA1I,EAAuJ,IAAvJ,CAAN;AACH;;AACuB,QAAlBC,kBAAkB,GAAG;AACvB,UAAM,IAAI7B,aAAa,CAACuB,WAAlB,CAA8B,gEAA9B,EAAgGzB,iCAAiC,CAAC2B,YAAlC,CAA+CG,WAA/I,EAA4J,IAA5J,CAAN;AACH;;AACmB,QAAdE,cAAc,GAAG;AACnB,WAAO,KAAKtB,WAAZ;AACH;;AACe,QAAVuB,UAAU,GAAG;AACf,WAAO,KAAK3B,KAAL,CAAW4B,OAAlB;AACH;;AACY,QAAPC,OAAO,GAAG;AACZ,WAAO,KAAK3B,OAAZ;AACH;;AA/CwD;;AAiD7DV,OAAO,CAACK,OAAR,GAAkBA,OAAlB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst universal_authenticator_library_1 = require(\"universal-authenticator-library\");\nconst UALWaxError_1 = require(\"./UALWaxError\");\nclass WaxUser extends universal_authenticator_library_1.User {\n    constructor(chain, userAccount, pubKeys, wax) {\n        super();\n        this.accountName = userAccount;\n        this.pubKeys = pubKeys;\n        this.requestPermission = 'active';\n        this.chain = chain;\n        this.wax = wax;\n        // compatible features\n        this.api = wax.api;\n        this.rpc = wax.api && wax.api.rpc;\n    }\n    /**\n     * @param transaction  The transaction to be signed (a object that matches the RpcAPI structure).\n     * @param options  Options for tapos fields\n     */\n    async signTransaction(transaction, options) {\n        try {\n            const account = await this.wax.login();\n            if (account !== this.accountName) {\n                throw new Error('Account does not match the requested permission');\n            }\n            else {\n                this.api = this.wax.api;\n                this.rpc = this.wax.api.rpc;\n            }\n            const completedTransaction = await this.wax.api.transact(transaction, options);\n            return this.returnEosjsTransaction(options.broadcast !== false, completedTransaction);\n        }\n        catch (e) {\n            throw new UALWaxError_1.UALWaxError(e.message ? e.message : 'Unable to sign transaction', universal_authenticator_library_1.UALErrorType.Signing, e);\n        }\n    }\n    async signArbitrary() {\n        throw new UALWaxError_1.UALWaxError('WAX Cloud Wallet does not currently support signArbitrary', universal_authenticator_library_1.UALErrorType.Unsupported, null);\n    }\n    async verifyKeyOwnership() {\n        throw new UALWaxError_1.UALWaxError('WAX Cloud Wallet does not currently support verifyKeyOwnership', universal_authenticator_library_1.UALErrorType.Unsupported, null);\n    }\n    async getAccountName() {\n        return this.accountName;\n    }\n    async getChainId() {\n        return this.chain.chainId;\n    }\n    async getKeys() {\n        return this.pubKeys;\n    }\n}\nexports.WaxUser = WaxUser;\n"]},"metadata":{},"sourceType":"script"}