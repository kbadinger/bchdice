{"ast":null,"code":"var _jsxFileName = \"/Users/kevinbadinger/eos/reactdemo/WCWReact/src/components/droplist.jsx\";\nimport { JsonRpc } from \"eosjs\";\nimport { deserialize, ObjectSchema } from \"atomicassets\";\nimport React, { StrictMode, useEffect, useState } from \"react\";\nimport { Button, Card, CardMedia, CardHeader, Typography, CardContent, Grid } from \"@material-ui/core\";\nimport Form from \"react-bootstrap/Form\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./droplist.css\";\nconst defaultState = {\n  activeUser: null,\n  accountName: \"\",\n  dropItems: \"\",\n  drops: [],\n  statusDisplay: \"\"\n};\nvar ourNetwork = {\n  chainId: \"1064487b3cd1a897ce03ae5b6a865651747e2e152090f99c1d19d44e01aea5a4\",\n  rpcEndpoints: [{\n    protocol: \"https\",\n    host: \"chain.wax.io\",\n    port: \"\"\n  }]\n};\nconst picture = {\n  height: \"150px\",\n  width: \"150px\"\n}; //This is hardcoded to the exchange rate, the appropriate thing is to call the delphi oracle to get the median exchange rate.\n//https://wax.bloks.io/account/delphioracle?loadContract=true&tab=Tables&table=datapoints&account=delphioracle&scope=waxpusd&limit=1\n\nconst WaxUsd = 0.13;\n\nclass DropListApp extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.renderLogoutBtn = () => {};\n\n    this.handleDropUpdate = event => {\n      this.setState({\n        dropItems: event.target.value\n      }); //Need to update the drop list with with changed drop_id.  Pull the drops again and set the new state.\n    };\n\n    this.renderDropForm = () => {\n      const {\n        dropItems\n      } = this.state;\n      const part = this.partition;\n      const rpc = this.state.rpc;\n      const bd = this.buyDrop;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          marginLeft: \"auto\",\n          marginRight: \"auto\",\n          width: \"25%\",\n          marginTop: \"40px\",\n          marginBottom: \"10px\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(Form, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Form.Group, {\n        controlId: \"dropItems\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Form.Label, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 13\n        }\n      }, \"Wallet:\"), /*#__PURE__*/React.createElement(Form.Control, {\n        type: \"text\",\n        name: \"dropItems\",\n        value: dropItems,\n        onChange: this.handleDropUpdate,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 13\n        }\n      })), /*#__PURE__*/React.createElement(Typography, {\n        variant: \"subtitle2\",\n        component: \"h2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 11\n        }\n      }, this.state.statusDisplay)), /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          textAlign: \"center\",\n          marginLeft: \"-250px\",\n          paddingBottom: \"50px\",\n          paddingTop: \"25px\",\n          width: \"900px\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"h3\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 11\n        }\n      }, \"Drops\"), /*#__PURE__*/React.createElement(Grid, {\n        container: true,\n        spacing: 4,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 11\n        }\n      }, this.state.drops.map(function (item, i) {\n        var _item$collection_name, _item$drop_id;\n\n        var desc = \"\";\n        var d1 = new Date(item.start_time * 1000);\n        var std = \"Start: \" + (d1.getMonth() + 1) + \"/\" + d1.getDate() + \"/\" + d1.getFullYear() + \" \" + String(d1.getHours()).padStart(2, \"0\") + \":\" + String(d1.getMinutes()).padStart(2, \"0\") + \":\" + String(d1.getSeconds()).padStart(2, \"0\");\n        if (d1.getFullYear() < 1999) std = \"\";\n        d1 = new Date(item.end_time * 1000);\n        var etd = \"End: \" + (d1.getMonth() + 1) + \"/\" + d1.getDate() + \"/\" + d1.getFullYear() + \" \" + String(d1.getHours()).padStart(2, \"0\") + \":\" + String(d1.getMinutes()).padStart(2, \"0\") + \":\" + String(d1.getSeconds()).padStart(2, \"0\");\n        if (d1.getFullYear() < 1999) etd = \"\";\n        /*     if (item.display_data.length > 0) {\n              try {\n                desc = JSON.parse(item.display_data).description;\n              } catch (e) {\n                desc = item.display_data;\n              }\n            }\n        */\n\n        let img = \"\";\n\n        if (item.imgTag != null && item.imgTag.length > 0) {\n          img = /*#__PURE__*/React.createElement(\"img\", {\n            style: picture,\n            src: item.imgTag,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 369,\n              columnNumber: 23\n            }\n          });\n        }\n\n        return /*#__PURE__*/React.createElement(Grid, {\n          item: true,\n          xs: 12,\n          sm: 6,\n          md: 4,\n          key: item.drop_id,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 373,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(Card, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 374,\n            columnNumber: 19\n          }\n        }, /*#__PURE__*/React.createElement(CardHeader, {\n          title: (_item$collection_name = item.collection_name) !== null && _item$collection_name !== void 0 ? _item$collection_name : \"\",\n          subheader: (_item$drop_id = item.drop_id) !== null && _item$drop_id !== void 0 ? _item$drop_id : \"\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 375,\n            columnNumber: 21\n          }\n        }), /*#__PURE__*/React.createElement(CardContent, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 379,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(Typography, {\n          variant: \"subtitle2\",\n          component: \"h2\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 380,\n            columnNumber: 23\n          }\n        }, item.listing_price), /*#__PURE__*/React.createElement(Typography, {\n          variant: \"subtitle2\",\n          component: \"h2\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 384,\n            columnNumber: 23\n          }\n        }, std), /*#__PURE__*/React.createElement(Typography, {\n          variant: \"subtitle2\",\n          component: \"h2\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 388,\n            columnNumber: 23\n          }\n        }, etd), img, /*#__PURE__*/React.createElement(Typography, {\n          variant: \"body2\",\n          color: \"textSecondary\",\n          component: \"p\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 393,\n            columnNumber: 23\n          }\n        }, desc), /*#__PURE__*/React.createElement(Button, {\n          onClick: () => bd(item.drop_id, item.listing_price),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 401,\n            columnNumber: 23\n          }\n        }, \"Buy Drop\"))));\n      }))));\n    };\n\n    this.state = { ...defaultState,\n      rows: [],\n      rpc: new JsonRpc(`${ourNetwork.rpcEndpoints[0].protocol}://${ourNetwork.rpcEndpoints[0].host}`)\n    };\n    this.updateAccountName = this.updateAccountName.bind(this);\n    this.renderModalButton = this.renderModalButton.bind(this);\n    this.handleDropUpdate = this.handleDropUpdate.bind(this);\n    this.renderDropForm = this.renderDropForm.bind(this);\n    this.buyDrop = this.buyDrop.bind(this);\n    this.buyClaimContract = this.buyClaimContract.bind(this);\n\n    this.partition = (str, n) => {\n      var aa = [];\n      var i, l;\n\n      for (i = 0, l = str.length; i < l; i += n) {\n        aa.push(str.substr(i, n));\n      }\n\n      return aa;\n    };\n  }\n\n  componentDidMount() {\n    console.log(\"run\");\n    this._asyncRequest = this.state.rpc.get_table_rows({\n      json: true,\n      code: \"atomicassets\",\n      scope: \"dracodice\",\n      table: \"templates\",\n      lower_bound: \"329238\",\n      limit: 1000,\n      reverse: false,\n      show_payer: false\n    }).then(resp => {\n      this._asyncRequest = null;\n      this.setState(state => ({ ...this.state,\n        drops: resp.rows\n      }));\n\n      for (let itemNdx in resp.rows) {\n        let item = resp.rows[itemNdx];\n        let os = ObjectSchema([{\n          \"name\": \"name\",\n          \"type\": \"string\"\n        }, {\n          \"name\": \"img\",\n          \"type\": \"image\"\n        }, {\n          \"name\": \"series\",\n          \"type\": \"string\"\n        }, {\n          \"name\": \"rarity\",\n          \"type\": \"string\"\n        }, {\n          \"name\": \"material\",\n          \"type\": \"string\"\n        }, {\n          \"name\": \"style\",\n          \"type\": \"string\"\n        }, {\n          \"name\": \"face values\",\n          \"type\": \"string\"\n        }, {\n          \"name\": \"gameimg\",\n          \"type\": \"image\"\n        }, {\n          \"name\": \"video\",\n          \"type\": \"string\"\n        }, {\n          \"name\": \"shape\",\n          \"type\": \"string\"\n        }]);\n        let deserializedData = deserialize(item.immutable_serialized_data, os);\n        item.imgTag = \"https://ipfs.io/ipfs/\" + deserializedData.img;\n        this.state.drops[itemNdx] = item;\n      }\n    });\n    this.setState(state => ({ ...this.state,\n      drops: this.state.drops\n    }));\n  }\n\n  componentWillUnmount() {\n    if (this._asyncRequest) {\n      this._asyncRequest.cancel();\n    }\n  }\n\n  async buyDrop(buyId, pri) {\n    this.buyClaimContract(buyId, pri);\n  }\n\n  componentDidUpdate() {\n    const {//  ual: { activeUser },\n    } = this.props; //    this.setState(defaultState);\n  }\n\n  async updateAccountName() {\n    try {\n      const accountName = await this.state.activeUser.getAccountName();\n      this.setState({\n        accountName\n      }, this.updateAccountBalance);\n    } catch (e) {\n      console.warn(e);\n    }\n  }\n\n  renderModalButton() {\n    return /*#__PURE__*/React.createElement(\"p\", {\n      className: \"ual-btn-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 7\n      }\n    });\n  }\n\n  async buyClaimContract(buyId, pri) {\n    const {\n      accountName,\n      activeUser\n    } = this.state;\n\n    const roundOne = (n, d) => Math.round(n * Math.pow(10, d)) / Math.pow(10, d);\n\n    var buyString = pri;\n    var delphi = 0;\n\n    if (buyString.includes(\"USD\")) {\n      //For drops that are USD, need to convert the USD price to WAXP.  Using the estimated hard coded exchange rate from WaxUsd.  Will fail if this is not close enough.\n      var priAmt = buyString.split(\" \")[0];\n      var waxP = priAmt / WaxUsd;\n      var waxP = waxP + 0.5;\n      var waxP = roundOne(waxP, 8);\n      var s = waxP.toString();\n      if (s.indexOf(\".\") == -1) s += \".\";\n\n      while (s.length < s.indexOf(\".\") + 9) s += \"0\";\n\n      waxP = s;\n      waxP = waxP + \" WAX\";\n      delphi = WaxUsd;\n    }\n\n    const orderTransaction = {\n      actions: [{\n        account: \"eosio.token\",\n        name: \"transfer\",\n        authorization: [{\n          actor: accountName,\n          permission: activeUser.requestPermission\n        }],\n        data: {\n          from: accountName,\n          to: \"atomicdropsx\",\n          quantity: buyString,\n          memo: \"deposit\"\n        }\n      }]\n    };\n\n    try {\n      const account = await this.state.rpc.get_account(accountName);\n      await activeUser.signTransaction(orderTransaction, {\n        blocksBehind: 3,\n        expireSeconds: 15\n      });\n      const claimTransaction = {\n        actions: [{\n          account: \"atomicdropsx\",\n          name: \"claimdrop\",\n          authorization: [{\n            actor: accountName,\n            permission: activeUser.requestPermission\n          }],\n          data: {\n            claimer: accountName,\n            drop_id: buyId,\n            claim_amount: 1,\n            intended_delphi_median: delphi,\n            referrer: \"atomicdrop\",\n            country: \"US\"\n          }\n        }]\n      };\n      await activeUser.signTransaction(claimTransaction, {\n        blocksBehind: 3,\n        expireSeconds: 15\n      });\n    } catch (error) {\n      console.warn(error);\n    }\n  }\n\n  render() {\n    let modalButton = this.renderModalButton();\n    let loggedIn = \"\";\n    let logoutButton = null; // Once UAL wrapper is implemented, uncomment below lines\n\n    const {\n      accountName\n    } = this.state;\n    modalButton = false;\n    logoutButton = this.renderLogoutBtn();\n    loggedIn = accountName ? `Logged in as ${accountName}` : \"\";\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        textAlign: \"center\",\n        paddingTop: \"50px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 431,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 432,\n        columnNumber: 9\n      }\n    }, \"WAX Atomic Drop Demo\"), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 433,\n        columnNumber: 9\n      }\n    }, \"ReactJS hack\"), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        marginBottom: \"20px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 434,\n        columnNumber: 9\n      }\n    }), modalButton, /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"ual-subtitle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 436,\n        columnNumber: 9\n      }\n    }, loggedIn), this.renderDropForm(), logoutButton);\n  }\n\n}\n\nDropListApp.displayName = \"BCH Draco collection\";\nexport default DropListApp;","map":{"version":3,"sources":["/Users/kevinbadinger/eos/reactdemo/WCWReact/src/components/droplist.jsx"],"names":["JsonRpc","deserialize","ObjectSchema","React","StrictMode","useEffect","useState","Button","Card","CardMedia","CardHeader","Typography","CardContent","Grid","Form","defaultState","activeUser","accountName","dropItems","drops","statusDisplay","ourNetwork","chainId","rpcEndpoints","protocol","host","port","picture","height","width","WaxUsd","DropListApp","Component","constructor","props","renderLogoutBtn","handleDropUpdate","event","setState","target","value","renderDropForm","state","part","partition","rpc","bd","buyDrop","marginLeft","marginRight","marginTop","marginBottom","textAlign","paddingBottom","paddingTop","map","item","i","desc","d1","Date","start_time","std","getMonth","getDate","getFullYear","String","getHours","padStart","getMinutes","getSeconds","end_time","etd","img","imgTag","length","drop_id","collection_name","listing_price","rows","updateAccountName","bind","renderModalButton","buyClaimContract","str","n","aa","l","push","substr","componentDidMount","console","log","_asyncRequest","get_table_rows","json","code","scope","table","lower_bound","limit","reverse","show_payer","then","resp","itemNdx","os","deserializedData","immutable_serialized_data","componentWillUnmount","cancel","buyId","pri","componentDidUpdate","getAccountName","updateAccountBalance","e","warn","roundOne","d","Math","round","pow","buyString","delphi","includes","priAmt","split","waxP","s","toString","indexOf","orderTransaction","actions","account","name","authorization","actor","permission","requestPermission","data","from","to","quantity","memo","get_account","signTransaction","blocksBehind","expireSeconds","claimTransaction","claimer","claim_amount","intended_delphi_median","referrer","country","error","render","modalButton","loggedIn","logoutButton","displayName"],"mappings":"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","sourcesContent":["import { JsonRpc } from \"eosjs\";\nimport { deserialize, ObjectSchema } from \"atomicassets\";\nimport React, { StrictMode, useEffect, useState } from \"react\";\nimport {\n  Button,\n  Card,\n  CardMedia,\n  CardHeader,\n  Typography,\n  CardContent,\n  Grid,\n} from \"@material-ui/core\";\nimport Form from \"react-bootstrap/Form\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./droplist.css\";\n\n\nconst defaultState = {\n  activeUser: null, \n  accountName: \"\",\n  dropItems: \"\",\n  drops: [],\n  statusDisplay: \"\",\n};\n\nvar ourNetwork = {\n  chainId: \"1064487b3cd1a897ce03ae5b6a865651747e2e152090f99c1d19d44e01aea5a4\",\n  rpcEndpoints: [{ protocol: \"https\", host: \"chain.wax.io\", port: \"\" }],\n};\n\nconst picture = {\n  height: \"150px\",\n  width: \"150px\",\n};\n\n//This is hardcoded to the exchange rate, the appropriate thing is to call the delphi oracle to get the median exchange rate.\n//https://wax.bloks.io/account/delphioracle?loadContract=true&tab=Tables&table=datapoints&account=delphioracle&scope=waxpusd&limit=1\n\nconst WaxUsd = 0.13;\n\nclass DropListApp extends React.Component {\n\n  static displayName = \"BCH Draco collection\";\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      ...defaultState,\n      rows: [],\n      rpc: new JsonRpc(\n        `${ourNetwork.rpcEndpoints[0].protocol}://${ourNetwork.rpcEndpoints[0].host}`\n      ),\n    };\n\n    this.updateAccountName = this.updateAccountName.bind(this);\n    this.renderModalButton = this.renderModalButton.bind(this);\n    this.handleDropUpdate = this.handleDropUpdate.bind(this);\n    this.renderDropForm = this.renderDropForm.bind(this);\n    this.buyDrop = this.buyDrop.bind(this);\n    this.buyClaimContract = this.buyClaimContract.bind(this);\n\n    this.partition = (str, n) => {\n      var aa = [];\n      var i, l;\n      for (i = 0, l = str.length; i < l; i += n) {\n        aa.push(str.substr(i, n));\n      }\n      return aa;\n    };\n  }\n\n  componentDidMount() {\n\n    console.log(\"run\");\n    \n    this._asyncRequest = this.state.rpc\n      .get_table_rows({\n        json: true,\n        code: \"atomicassets\",\n        scope: \"dracodice\",\n        table: \"templates\",\n        lower_bound: \"329238\",\n        limit: 1000,\n        reverse: false,\n        show_payer: false,\n      })\n      .then((resp) => {\n        this._asyncRequest = null;\n \n        this.setState((state) => ({\n          ...this.state,\n          drops: resp.rows,\n        }));\n\n        for (let itemNdx in resp.rows) {\n          let item = resp.rows[itemNdx];\n\n          let os =                         ObjectSchema([ { \"name\": \"name\", \"type\": \"string\" }, { \"name\": \"img\", \"type\": \"image\" }, { \"name\": \"series\", \"type\": \"string\" }, { \"name\": \"rarity\", \"type\": \"string\" }, { \"name\": \"material\", \"type\": \"string\" }, { \"name\": \"style\", \"type\": \"string\" }, { \"name\": \"face values\", \"type\": \"string\" }, { \"name\": \"gameimg\", \"type\": \"image\" }, { \"name\": \"video\", \"type\": \"string\" }, { \"name\": \"shape\", \"type\": \"string\" } ]          )\n;\n\n\n\n                      let deserializedData = deserialize(\n                        item.immutable_serialized_data,\nos                  );\n \n                        item.imgTag =\n                      \"https://ipfs.io/ipfs/\" + deserializedData.img;\n           this.state.drops[itemNdx] = item;\n                       \n               \n         \n                    \n          }\n      \n      });\n\n      this.setState((state) => ({\n        ...this.state,\n        drops: this.state.drops,\n     }));\n  \n    }\n\n  componentWillUnmount() {\n    if (this._asyncRequest) {\n      this._asyncRequest.cancel();\n    }\n  }\n\n  async buyDrop(buyId, pri) {\n    this.buyClaimContract(buyId, pri);\n\n  }\n\n  componentDidUpdate() {\n    const {\n    //  ual: { activeUser },\n    } = this.props;\n\n//    this.setState(defaultState);\n\n  }\n\n  async updateAccountName() {\n    try {\n      const accountName = await this.state.activeUser.getAccountName();\n      this.setState({ accountName }, this.updateAccountBalance);\n    } catch (e) {\n      console.warn(e);\n    }\n  }\n\n  renderLogoutBtn = () => {\n    \n    \n  };\n\n  renderModalButton() {\n    return (\n      <p className=\"ual-btn-wrapper\">\n        \n      </p>\n    );\n  }\n\n  handleDropUpdate = (event) => {\n    this.setState({ dropItems: event.target.value });\n\n    //Need to update the drop list with with changed drop_id.  Pull the drops again and set the new state.\n  };\n\n  async buyClaimContract(buyId, pri) {\n    const { accountName, activeUser } = this.state;\n\n    const roundOne = (n, d) =>\n      Math.round(n * Math.pow(10, d)) / Math.pow(10, d);\n\n    var buyString = pri;\n\n    var delphi = 0;\n\n    if (buyString.includes(\"USD\")) {\n\n      //For drops that are USD, need to convert the USD price to WAXP.  Using the estimated hard coded exchange rate from WaxUsd.  Will fail if this is not close enough.\n\n      var priAmt = buyString.split(\" \")[0];\n\n      var waxP = priAmt / WaxUsd;\n\n      var waxP = waxP + 0.5;\n\n      var waxP = roundOne(waxP, 8);\n\n      var s = waxP.toString();\n      if (s.indexOf(\".\") == -1) s += \".\";\n\n      while (s.length < s.indexOf(\".\") + 9) s += \"0\";\n\n      waxP = s;\n\n      waxP = waxP + \" WAX\";\n\n      delphi = WaxUsd;\n\n    \n    \n    }\n\n\n    const orderTransaction = {\n      actions: [\n        {\n          account: \"eosio.token\",\n          name: \"transfer\",\n          authorization: [\n            {\n              actor: accountName,\n              permission: activeUser.requestPermission,\n            },\n          ],\n          data: {\n            from: accountName,\n            to: \"atomicdropsx\",\n            quantity: buyString,\n            memo: \"deposit\",\n          },\n        },\n      ],\n    };\n\n    try {\n      const account = await this.state.rpc.get_account(accountName);\n\n      await activeUser.signTransaction(orderTransaction, {\n        blocksBehind: 3,\n        expireSeconds: 15,\n      });\n\n\n      const claimTransaction = {\n        actions: [\n          {\n            account: \"atomicdropsx\",\n            name: \"claimdrop\",\n            authorization: [\n              {\n                actor: accountName,\n                permission: activeUser.requestPermission,\n              },\n            ],\n            data: {\n              claimer: accountName,\n              drop_id: buyId,\n              claim_amount: 1,\n              intended_delphi_median: delphi,\n              referrer: \"atomicdrop\",\n              country: \"US\",\n            },\n          },\n        ],\n      };\n\n      await activeUser.signTransaction(claimTransaction, {\n        blocksBehind: 3,\n        expireSeconds: 15,\n      });\n\n    } catch (error) {\n      console.warn(error);\n    }\n  }\n\n  renderDropForm = () => {\n    const { dropItems } = this.state;\n\n    const part = this.partition;\n\n    const rpc = this.state.rpc;\n\n    const bd = this.buyDrop;\n\n    return (\n      <div\n        style={{\n          marginLeft: \"auto\",\n          marginRight: \"auto\",\n          width: \"25%\",\n          marginTop: \"40px\",\n          marginBottom: \"10px\",\n        }}\n      >\n        <Form>\n          <Form.Group controlId=\"dropItems\">\n            <Form.Label>Wallet:</Form.Label>\n            <Form.Control\n              type=\"text\"\n              name=\"dropItems\"\n              value={dropItems}\n              onChange={this.handleDropUpdate}\n            />\n          </Form.Group>\n\n          <Typography variant=\"subtitle2\" component=\"h2\">\n            {this.state.statusDisplay}\n          </Typography>\n        </Form>\n\n        <div\n          style={{\n            textAlign: \"center\",\n            marginLeft: \"-250px\",\n            paddingBottom: \"50px\",\n            paddingTop: \"25px\",\n            width: \"900px\",\n          }}\n        >\n          <h3>Drops</h3>\n          <Grid container spacing={4}>\n            {this.state.drops.map(function (item, i) {\n              var desc = \"\";\n\n              var d1 = new Date(item.start_time * 1000);\n\n              var std =\n                \"Start: \" +\n                (d1.getMonth() + 1) +\n                \"/\" +\n                d1.getDate() +\n                \"/\" +\n                d1.getFullYear() +\n                \" \" +\n                String(d1.getHours()).padStart(2, \"0\") +\n                \":\" +\n                String(d1.getMinutes()).padStart(2, \"0\") +\n                \":\" +\n                String(d1.getSeconds()).padStart(2, \"0\");\n\n              if (d1.getFullYear() < 1999) std = \"\";\n\n              d1 = new Date(item.end_time * 1000);\n\n              var etd =\n                \"End: \" +\n                (d1.getMonth() + 1) +\n                \"/\" +\n                d1.getDate() +\n                \"/\" +\n                d1.getFullYear() +\n                \" \" +\n                String(d1.getHours()).padStart(2, \"0\") +\n                \":\" +\n                String(d1.getMinutes()).padStart(2, \"0\") +\n                \":\" +\n                String(d1.getSeconds()).padStart(2, \"0\");\n\n              if (d1.getFullYear() < 1999) etd = \"\";\n          /*     if (item.display_data.length > 0) {\n                try {\n                  desc = JSON.parse(item.display_data).description;\n                } catch (e) {\n                  desc = item.display_data;\n                }\n              }\n*/\n              let img = \"\";\n\n              if (item.imgTag != null && item.imgTag.length > 0) {\n                img = <img style={picture} src={item.imgTag} />;\n              }\n\n              return (\n                <Grid item xs={12} sm={6} md={4} key={item.drop_id}>\n                  <Card>\n                    <CardHeader\n                      title={item.collection_name ?? \"\"}\n                      subheader={item.drop_id ?? \"\"}\n                    />\n                    <CardContent>\n                      <Typography variant=\"subtitle2\" component=\"h2\">\n                        {item.listing_price}\n                      </Typography>\n\n                      <Typography variant=\"subtitle2\" component=\"h2\">\n                        {std}\n                      </Typography>\n\n                      <Typography variant=\"subtitle2\" component=\"h2\">\n                        {etd}\n                      </Typography>\n\n                      {img}\n                      <Typography\n                        variant=\"body2\"\n                        color=\"textSecondary\"\n                        component=\"p\"\n                      >\n                        {desc}\n                      </Typography>\n\n                      <Button\n                        onClick={() => bd(item.drop_id, item.listing_price)}\n                      >\n                        {\"Buy Drop\"}\n                      </Button>\n                    </CardContent>\n                  </Card>\n                </Grid>\n              );\n            })}\n          </Grid>\n        </div>\n      </div>\n    );\n  };\n\n  render() {\n    let modalButton = this.renderModalButton();\n    let loggedIn = \"\";\n    let logoutButton = null;\n\n    // Once UAL wrapper is implemented, uncomment below lines\n\n\n    const { accountName } = this.state;\n    modalButton = false;\n    logoutButton = this.renderLogoutBtn();\n    loggedIn = accountName ? `Logged in as ${accountName}` : \"\";\n\n    return (\n      <div style={{ textAlign: \"center\", paddingTop: \"50px\" }}>\n        <h2>WAX Atomic Drop Demo</h2>\n        <span>ReactJS hack</span>\n        <div style={{ marginBottom: \"20px\" }}></div>\n        {modalButton}\n        <h3 className=\"ual-subtitle\">{loggedIn}</h3>\n        {this.renderDropForm()}\n        {logoutButton}\n      </div>\n    );\n  }\n}\n\nexport default DropListApp;\n"]},"metadata":{},"sourceType":"module"}