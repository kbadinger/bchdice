{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ParserTypes = void 0;\n\nconst BooleanParser_1 = __importDefault(require(\"./TypeParser/BooleanParser\"));\n\nconst ByteParser_1 = require(\"./TypeParser/ByteParser\");\n\nconst FixedIntegerParser_1 = __importDefault(require(\"./TypeParser/FixedIntegerParser\"));\n\nconst FloatingParser_1 = __importDefault(require(\"./TypeParser/FloatingParser\"));\n\nconst IPFSParser_1 = __importDefault(require(\"./TypeParser/IPFSParser\"));\n\nconst StringParser_1 = __importDefault(require(\"./TypeParser/StringParser\"));\n\nconst VariableIntegerParser_1 = __importDefault(require(\"./TypeParser/VariableIntegerParser\")); // tslint:disable:object-literal-sort-keys\n\n\nexports.ParserTypes = {\n  int8: new VariableIntegerParser_1.default(1, false),\n  int16: new VariableIntegerParser_1.default(2, false),\n  int32: new VariableIntegerParser_1.default(4, false),\n  int64: new VariableIntegerParser_1.default(8, false),\n  uint8: new VariableIntegerParser_1.default(1, true),\n  uint16: new VariableIntegerParser_1.default(2, true),\n  uint32: new VariableIntegerParser_1.default(4, true),\n  uint64: new VariableIntegerParser_1.default(8, true),\n  fixed8: new FixedIntegerParser_1.default(1),\n  fixed16: new FixedIntegerParser_1.default(2),\n  fixed32: new FixedIntegerParser_1.default(4),\n  fixed64: new FixedIntegerParser_1.default(8),\n  bool: new BooleanParser_1.default(),\n  bytes: new ByteParser_1.ByteParser(),\n  string: new StringParser_1.default(),\n  image: new StringParser_1.default(),\n  ipfs: new IPFSParser_1.default(),\n  float: new FloatingParser_1.default(false),\n  double: new FloatingParser_1.default(true)\n};","map":{"version":3,"sources":["/Users/kevinbadinger/eos/reactdemo/WCWReact/node_modules/atomicassets/build/Serialization/Types.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","ParserTypes","BooleanParser_1","require","ByteParser_1","FixedIntegerParser_1","FloatingParser_1","IPFSParser_1","StringParser_1","VariableIntegerParser_1","int8","default","int16","int32","int64","uint8","uint16","uint32","uint64","fixed8","fixed16","fixed32","fixed64","bool","bytes","ByteParser","string","image","ipfs","float","double"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ParserTypes = void 0;\nconst BooleanParser_1 = __importDefault(require(\"./TypeParser/BooleanParser\"));\nconst ByteParser_1 = require(\"./TypeParser/ByteParser\");\nconst FixedIntegerParser_1 = __importDefault(require(\"./TypeParser/FixedIntegerParser\"));\nconst FloatingParser_1 = __importDefault(require(\"./TypeParser/FloatingParser\"));\nconst IPFSParser_1 = __importDefault(require(\"./TypeParser/IPFSParser\"));\nconst StringParser_1 = __importDefault(require(\"./TypeParser/StringParser\"));\nconst VariableIntegerParser_1 = __importDefault(require(\"./TypeParser/VariableIntegerParser\"));\n// tslint:disable:object-literal-sort-keys\nexports.ParserTypes = {\n    int8: new VariableIntegerParser_1.default(1, false),\n    int16: new VariableIntegerParser_1.default(2, false),\n    int32: new VariableIntegerParser_1.default(4, false),\n    int64: new VariableIntegerParser_1.default(8, false),\n    uint8: new VariableIntegerParser_1.default(1, true),\n    uint16: new VariableIntegerParser_1.default(2, true),\n    uint32: new VariableIntegerParser_1.default(4, true),\n    uint64: new VariableIntegerParser_1.default(8, true),\n    fixed8: new FixedIntegerParser_1.default(1),\n    fixed16: new FixedIntegerParser_1.default(2),\n    fixed32: new FixedIntegerParser_1.default(4),\n    fixed64: new FixedIntegerParser_1.default(8),\n    bool: new BooleanParser_1.default(),\n    bytes: new ByteParser_1.ByteParser(),\n    string: new StringParser_1.default(),\n    image: new StringParser_1.default(),\n    ipfs: new IPFSParser_1.default(),\n    float: new FloatingParser_1.default(false),\n    double: new FloatingParser_1.default(true)\n};\n"]},"metadata":{},"sourceType":"script"}