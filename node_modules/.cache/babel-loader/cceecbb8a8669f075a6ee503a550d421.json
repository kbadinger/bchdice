{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst Serialization_1 = require(\"../../Serialization\");\n\nconst Collection_1 = __importDefault(require(\"./Collection\"));\n\nconst Schema_1 = __importDefault(require(\"./Schema\"));\n\nconst Template_1 = __importDefault(require(\"./Template\"));\n\nclass RpcAsset {\n  constructor(api, owner, id, data, collection, schema, template, cache = true) {\n    this.api = api;\n    this.owner = owner;\n    this.id = id;\n    this._data = new Promise(async (resolve, reject) => {\n      if (data) {\n        resolve(data);\n      } else {\n        try {\n          resolve(await api.queue.fetchAsset(owner, id, cache));\n        } catch (e) {\n          reject(e);\n        }\n      }\n    });\n    this._template = new Promise(async (resolve, reject) => {\n      if (template) {\n        resolve(template);\n      } else {\n        try {\n          const row = await this._data;\n\n          if (Number(row.template_id) < 0) {\n            return resolve(null);\n          }\n\n          resolve(new Template_1.default(api, row.collection_name, row.template_id, undefined, undefined, cache));\n        } catch (e) {\n          reject(e);\n        }\n      }\n    });\n    this._collection = new Promise(async (resolve, reject) => {\n      if (collection) {\n        resolve(collection);\n      } else {\n        try {\n          const row = await this._data;\n          resolve(new Collection_1.default(api, row.collection_name, undefined, cache));\n        } catch (e) {\n          reject(e);\n        }\n      }\n    });\n    this._schema = new Promise(async (resolve, reject) => {\n      if (schema) {\n        resolve(schema);\n      } else {\n        try {\n          const row = await this._data;\n          resolve(new Schema_1.default(api, row.collection_name, row.schema_name, undefined, cache));\n        } catch (e) {\n          reject(e);\n        }\n      }\n    });\n  }\n\n  async template() {\n    return await this._template;\n  }\n\n  async collection() {\n    return await this._collection;\n  }\n\n  async schema() {\n    return await this._schema;\n  }\n\n  async backedTokens() {\n    return (await this._data).backed_tokens;\n  }\n\n  async immutableData() {\n    const schema = await this.schema();\n    const row = await this._data;\n    return Serialization_1.deserialize(row.immutable_serialized_data, await schema.format());\n  }\n\n  async mutableData() {\n    const schema = await this.schema();\n    const row = await this._data;\n    return Serialization_1.deserialize(row.mutable_serialized_data, await schema.format());\n  }\n\n  async data() {\n    const mutableData = await this.mutableData();\n    const immutableData = await this.immutableData();\n    const template = await this.template();\n    const templateData = template ? await template.immutableData() : {};\n    return Object.assign({}, mutableData, immutableData, templateData);\n  }\n\n  async toObject() {\n    const template = await this.template();\n    const collection = await this.collection();\n    const schema = await this.schema();\n    return {\n      asset_id: this.id,\n      collection: await collection.toObject(),\n      schema: await schema.toObject(),\n      template: template ? await template.toObject() : null,\n      backedTokens: await this.backedTokens(),\n      immutableData: await this.immutableData(),\n      mutableData: await this.mutableData(),\n      data: await this.data()\n    };\n  }\n\n}\n\nexports.default = RpcAsset;","map":{"version":3,"sources":["/Users/kevinbadinger/eos/reactdemo/WCWReact/node_modules/atomicassets/build/API/Rpc/Asset.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","Serialization_1","require","Collection_1","Schema_1","Template_1","RpcAsset","constructor","api","owner","id","data","collection","schema","template","cache","_data","Promise","resolve","reject","queue","fetchAsset","e","_template","row","Number","template_id","default","collection_name","undefined","_collection","_schema","schema_name","backedTokens","backed_tokens","immutableData","deserialize","immutable_serialized_data","format","mutableData","mutable_serialized_data","templateData","assign","toObject","asset_id"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Serialization_1 = require(\"../../Serialization\");\nconst Collection_1 = __importDefault(require(\"./Collection\"));\nconst Schema_1 = __importDefault(require(\"./Schema\"));\nconst Template_1 = __importDefault(require(\"./Template\"));\nclass RpcAsset {\n    constructor(api, owner, id, data, collection, schema, template, cache = true) {\n        this.api = api;\n        this.owner = owner;\n        this.id = id;\n        this._data = new Promise(async (resolve, reject) => {\n            if (data) {\n                resolve(data);\n            }\n            else {\n                try {\n                    resolve(await api.queue.fetchAsset(owner, id, cache));\n                }\n                catch (e) {\n                    reject(e);\n                }\n            }\n        });\n        this._template = new Promise(async (resolve, reject) => {\n            if (template) {\n                resolve(template);\n            }\n            else {\n                try {\n                    const row = await this._data;\n                    if (Number(row.template_id) < 0) {\n                        return resolve(null);\n                    }\n                    resolve(new Template_1.default(api, row.collection_name, row.template_id, undefined, undefined, cache));\n                }\n                catch (e) {\n                    reject(e);\n                }\n            }\n        });\n        this._collection = new Promise(async (resolve, reject) => {\n            if (collection) {\n                resolve(collection);\n            }\n            else {\n                try {\n                    const row = await this._data;\n                    resolve(new Collection_1.default(api, row.collection_name, undefined, cache));\n                }\n                catch (e) {\n                    reject(e);\n                }\n            }\n        });\n        this._schema = new Promise(async (resolve, reject) => {\n            if (schema) {\n                resolve(schema);\n            }\n            else {\n                try {\n                    const row = await this._data;\n                    resolve(new Schema_1.default(api, row.collection_name, row.schema_name, undefined, cache));\n                }\n                catch (e) {\n                    reject(e);\n                }\n            }\n        });\n    }\n    async template() {\n        return await this._template;\n    }\n    async collection() {\n        return await this._collection;\n    }\n    async schema() {\n        return await this._schema;\n    }\n    async backedTokens() {\n        return (await this._data).backed_tokens;\n    }\n    async immutableData() {\n        const schema = await this.schema();\n        const row = await this._data;\n        return Serialization_1.deserialize(row.immutable_serialized_data, await schema.format());\n    }\n    async mutableData() {\n        const schema = await this.schema();\n        const row = await this._data;\n        return Serialization_1.deserialize(row.mutable_serialized_data, await schema.format());\n    }\n    async data() {\n        const mutableData = await this.mutableData();\n        const immutableData = await this.immutableData();\n        const template = await this.template();\n        const templateData = template ? await template.immutableData() : {};\n        return Object.assign({}, mutableData, immutableData, templateData);\n    }\n    async toObject() {\n        const template = await this.template();\n        const collection = await this.collection();\n        const schema = await this.schema();\n        return {\n            asset_id: this.id,\n            collection: await collection.toObject(),\n            schema: await schema.toObject(),\n            template: template ? await template.toObject() : null,\n            backedTokens: await this.backedTokens(),\n            immutableData: await this.immutableData(),\n            mutableData: await this.mutableData(),\n            data: await this.data()\n        };\n    }\n}\nexports.default = RpcAsset;\n"]},"metadata":{},"sourceType":"script"}