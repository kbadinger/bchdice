{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst eosjs_1 = require(\"eosjs\");\n\nconst WaxEventSource_1 = require(\"./WaxEventSource\");\n\nclass WaxJS {\n  constructor(rcpEndpoint, userAccount = null, pubKeys = null, tryAutoLogin = true, apiSigner = null, waxSigningURL = \"https://all-access.wax.io\", waxAutoSigningURL = \"https://api-idm.wax.io/v1/accounts/auto-accept/\") {\n    this.apiSigner = apiSigner;\n    this.waxSigningURL = waxSigningURL;\n    this.waxAutoSigningURL = waxAutoSigningURL;\n    this.waxEventSource = new WaxEventSource_1.WaxEventSource(waxSigningURL);\n    this.rpc = new eosjs_1.JsonRpc(rcpEndpoint);\n\n    if (userAccount && Array.isArray(pubKeys)) {\n      // login from constructor\n      const data = {\n        userAccount,\n        pubKeys,\n        verified: true\n      };\n      this.receiveLogin({\n        data\n      });\n    } else {\n      // try to auto-login via endpoint\n      if (tryAutoLogin) {\n        this.loginViaEndpoint();\n      }\n    }\n  }\n\n  login() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.userAccount && Array.isArray(this.pubKeys)) {\n        return this.userAccount;\n      } else {\n        // login via UI\n        return this.loginViaWindow();\n      }\n    });\n  }\n\n  isAutoLoginAvailable() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.userAccount && Array.isArray(this.pubKeys)) {\n        return true;\n      } else {\n        // try to auto-login via endpoint\n        try {\n          yield this.loginViaEndpoint();\n          return true;\n        } catch (e) {\n          return false;\n        }\n      }\n\n      return false;\n    });\n  }\n\n  loginViaWindow() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const confirmationWindow = yield this.waxEventSource.openEventSource(this.waxSigningURL + \"/cloud-wallet/login/\");\n      return this.waxEventSource.onceEvent(confirmationWindow, this.waxSigningURL, this.receiveLogin.bind(this));\n    });\n  }\n\n  loginViaEndpoint() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const response = yield fetch(this.waxAutoSigningURL + \"login\", {\n        credentials: \"include\",\n        method: \"get\"\n      });\n\n      if (!response.ok) {\n        throw new Error(`Login Endpoint Error ${response.status} ${response.statusText}`);\n      }\n\n      const data = yield response.json();\n\n      if (data.processed && data.processed.except) {\n        throw new Error(data);\n      }\n\n      return this.receiveLogin({\n        data\n      });\n    });\n  }\n\n  receiveLogin(event) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        verified,\n        userAccount,\n        pubKeys,\n        whitelistedContracts,\n        autoLogin\n      } = event.data;\n\n      if (!verified) {\n        throw new Error(\"User declined to share their user account\");\n      }\n\n      if (userAccount == null || pubKeys == null) {\n        throw new Error(\"User does not have a blockchain account\");\n      }\n\n      localStorage.setItem(\"autoLogin\", autoLogin);\n      this.whitelistedContracts = whitelistedContracts || [];\n      this.userAccount = userAccount;\n      this.pubKeys = pubKeys;\n      const signer = {\n        getAvailableKeys: () => __awaiter(this, void 0, void 0, function* () {\n          return [...this.pubKeys, ...(this.apiSigner && (yield this.apiSigner.getAvailableKeys()) || [])];\n        }),\n        sign: data => __awaiter(this, void 0, void 0, function* () {\n          return {\n            serializedTransaction: data.serializedTransaction,\n            signatures: [...(yield this.signing(data.serializedTransaction)), ...(this.apiSigner && (yield this.apiSigner.sign(data)).signatures || [])]\n          };\n        })\n      }; // @ts-ignore\n\n      this.api = new eosjs_1.Api({\n        rpc: this.rpc,\n        signatureProvider: signer\n      });\n      const transact = this.api.transact.bind(this.api);\n      const url = this.waxSigningURL + \"/cloud-wallet/signing/\"; // We monkeypatch the transact method to overcome timeouts\n      // firing the pop-up which some browsers enforce, such as Safari.\n      // By pre-creating the pop-up window we will interact with,\n      // we ensure that it is not going to be rejected due to a delayed\n      // pop up that would otherwise occur post transaction creation\n\n      this.api.transact = (transaction, namedParams) => __awaiter(this, void 0, void 0, function* () {\n        if (!(yield this.canAutoSign(transaction))) {\n          this.signingWindow = yield window.open(url, \"WaxPopup\", \"height=800,width=600\");\n        }\n\n        return yield transact(transaction, namedParams);\n      });\n\n      return this.userAccount;\n    });\n  }\n\n  canAutoSign(transaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const deserializedTransaction = transaction.actions ? transaction : yield this.api.deserializeTransactionWithActions(transaction);\n      return !deserializedTransaction.actions.find(action => {\n        return !this.isWhitelisted(action);\n      });\n    });\n  }\n\n  isWhitelisted(action) {\n    return !!this.whitelistedContracts.find(w => {\n      if (w.contract === action.account) {\n        if (action.account === \"eosio.token\" && action.name === \"transfer\") {\n          return w.recipients.includes(action.data.to);\n        }\n\n        return true;\n      }\n\n      return false;\n    });\n  }\n\n  signing(transaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (yield this.canAutoSign(transaction)) {\n        return this.signViaEndpoint(transaction).catch(() => // Attempt to recover by signing via the window method\n        this.signViaWindow(undefined, transaction));\n      }\n\n      return this.signViaWindow(this.signingWindow, transaction);\n    });\n  }\n\n  signViaEndpoint(transaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const response = yield fetch(this.waxAutoSigningURL + \"signing\", {\n          body: JSON.stringify({\n            transaction: Object.values(transaction)\n          }),\n          credentials: \"include\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          method: \"POST\"\n        });\n\n        if (!response.ok) {\n          throw new Error(`Signing Endpoint Error ${response.status} ${response.statusText}`);\n        }\n\n        const data = yield response.json();\n\n        if (data.processed && data.processed.except) {\n          throw new Error(data);\n        }\n\n        return this.receiveSignatures({\n          data\n        });\n      } catch (e) {\n        // clear the whitelist to make sure we don't repeatedly attempt blocked actions\n        this.whitelistedContracts = [];\n        throw e;\n      }\n    });\n  }\n\n  signViaWindow(window, transaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const confirmationWindow = yield this.waxEventSource.openEventSource(this.waxSigningURL + \"/cloud-wallet/signing/\", {\n        type: \"TRANSACTION\",\n        transaction\n      }, window);\n      return this.waxEventSource.onceEvent(confirmationWindow, this.waxSigningURL, this.receiveSignatures.bind(this));\n    });\n  }\n\n  receiveSignatures(event) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (event.data.type === \"TX_SIGNED\") {\n        const {\n          verified,\n          signatures,\n          whitelistedContracts\n        } = event.data;\n\n        if (!verified || signatures == null) {\n          throw new Error(\"User declined to sign the transaction\");\n        }\n\n        this.whitelistedContracts = whitelistedContracts || [];\n        return signatures;\n      } else if (event.data.type !== \"READY\") {\n        throw new Error(`Unexpected response received when attempting signing: ${JSON.stringify(event.data, undefined, 2)}`);\n      }\n\n      return [];\n    });\n  }\n\n}\n\nexports.WaxJS = WaxJS;","map":{"version":3,"sources":["/Users/kevinbadinger/eos/reactdemo/WCWReact/node_modules/@waxio/waxjs/dist/index.js"],"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","eosjs_1","require","WaxEventSource_1","WaxJS","constructor","rcpEndpoint","userAccount","pubKeys","tryAutoLogin","apiSigner","waxSigningURL","waxAutoSigningURL","waxEventSource","WaxEventSource","rpc","JsonRpc","Array","isArray","data","verified","receiveLogin","loginViaEndpoint","login","loginViaWindow","isAutoLoginAvailable","confirmationWindow","openEventSource","onceEvent","bind","response","fetch","credentials","method","ok","Error","status","statusText","json","processed","except","event","whitelistedContracts","autoLogin","localStorage","setItem","signer","getAvailableKeys","sign","serializedTransaction","signatures","signing","api","Api","signatureProvider","transact","url","transaction","namedParams","canAutoSign","signingWindow","window","open","deserializedTransaction","actions","deserializeTransactionWithActions","find","action","isWhitelisted","w","contract","account","name","recipients","includes","to","signViaEndpoint","catch","signViaWindow","undefined","body","JSON","stringify","values","headers","receiveSignatures","type"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst eosjs_1 = require(\"eosjs\");\nconst WaxEventSource_1 = require(\"./WaxEventSource\");\nclass WaxJS {\n    constructor(rcpEndpoint, userAccount = null, pubKeys = null, tryAutoLogin = true, apiSigner = null, waxSigningURL = \"https://all-access.wax.io\", waxAutoSigningURL = \"https://api-idm.wax.io/v1/accounts/auto-accept/\") {\n        this.apiSigner = apiSigner;\n        this.waxSigningURL = waxSigningURL;\n        this.waxAutoSigningURL = waxAutoSigningURL;\n        this.waxEventSource = new WaxEventSource_1.WaxEventSource(waxSigningURL);\n        this.rpc = new eosjs_1.JsonRpc(rcpEndpoint);\n        if (userAccount && Array.isArray(pubKeys)) {\n            // login from constructor\n            const data = { userAccount, pubKeys, verified: true };\n            this.receiveLogin({ data });\n        }\n        else {\n            // try to auto-login via endpoint\n            if (tryAutoLogin) {\n                this.loginViaEndpoint();\n            }\n        }\n    }\n    login() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.userAccount && Array.isArray(this.pubKeys)) {\n                return this.userAccount;\n            }\n            else {\n                // login via UI\n                return this.loginViaWindow();\n            }\n        });\n    }\n    isAutoLoginAvailable() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.userAccount && Array.isArray(this.pubKeys)) {\n                return true;\n            }\n            else {\n                // try to auto-login via endpoint\n                try {\n                    yield this.loginViaEndpoint();\n                    return true;\n                }\n                catch (e) {\n                    return false;\n                }\n            }\n            return false;\n        });\n    }\n    loginViaWindow() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const confirmationWindow = yield this.waxEventSource.openEventSource(this.waxSigningURL + \"/cloud-wallet/login/\");\n            return this.waxEventSource.onceEvent(confirmationWindow, this.waxSigningURL, this.receiveLogin.bind(this));\n        });\n    }\n    loginViaEndpoint() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const response = yield fetch(this.waxAutoSigningURL + \"login\", {\n                credentials: \"include\",\n                method: \"get\"\n            });\n            if (!response.ok) {\n                throw new Error(`Login Endpoint Error ${response.status} ${response.statusText}`);\n            }\n            const data = yield response.json();\n            if (data.processed && data.processed.except) {\n                throw new Error(data);\n            }\n            return this.receiveLogin({ data });\n        });\n    }\n    receiveLogin(event) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { verified, userAccount, pubKeys, whitelistedContracts, autoLogin } = event.data;\n            if (!verified) {\n                throw new Error(\"User declined to share their user account\");\n            }\n            if (userAccount == null || pubKeys == null) {\n                throw new Error(\"User does not have a blockchain account\");\n            }\n            localStorage.setItem(\"autoLogin\", autoLogin);\n            this.whitelistedContracts = whitelistedContracts || [];\n            this.userAccount = userAccount;\n            this.pubKeys = pubKeys;\n            const signer = {\n                getAvailableKeys: () => __awaiter(this, void 0, void 0, function* () {\n                    return [\n                        ...this.pubKeys,\n                        ...((this.apiSigner && (yield this.apiSigner.getAvailableKeys())) ||\n                            [])\n                    ];\n                }),\n                sign: (data) => __awaiter(this, void 0, void 0, function* () {\n                    return {\n                        serializedTransaction: data.serializedTransaction,\n                        signatures: [\n                            ...(yield this.signing(data.serializedTransaction)),\n                            ...((this.apiSigner &&\n                                (yield this.apiSigner.sign(data)).signatures) ||\n                                [])\n                        ]\n                    };\n                })\n            };\n            // @ts-ignore\n            this.api = new eosjs_1.Api({ rpc: this.rpc, signatureProvider: signer });\n            const transact = this.api.transact.bind(this.api);\n            const url = this.waxSigningURL + \"/cloud-wallet/signing/\";\n            // We monkeypatch the transact method to overcome timeouts\n            // firing the pop-up which some browsers enforce, such as Safari.\n            // By pre-creating the pop-up window we will interact with,\n            // we ensure that it is not going to be rejected due to a delayed\n            // pop up that would otherwise occur post transaction creation\n            this.api.transact = (transaction, namedParams) => __awaiter(this, void 0, void 0, function* () {\n                if (!(yield this.canAutoSign(transaction))) {\n                    this.signingWindow = yield window.open(url, \"WaxPopup\", \"height=800,width=600\");\n                }\n                return yield transact(transaction, namedParams);\n            });\n            return this.userAccount;\n        });\n    }\n    canAutoSign(transaction) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const deserializedTransaction = transaction.actions\n                ? transaction\n                : yield this.api.deserializeTransactionWithActions(transaction);\n            return !deserializedTransaction.actions.find((action) => {\n                return !this.isWhitelisted(action);\n            });\n        });\n    }\n    isWhitelisted(action) {\n        return !!this.whitelistedContracts.find((w) => {\n            if (w.contract === action.account) {\n                if (action.account === \"eosio.token\" && action.name === \"transfer\") {\n                    return w.recipients.includes(action.data.to);\n                }\n                return true;\n            }\n            return false;\n        });\n    }\n    signing(transaction) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (yield this.canAutoSign(transaction)) {\n                return this.signViaEndpoint(transaction).catch(() => \n                // Attempt to recover by signing via the window method\n                this.signViaWindow(undefined, transaction));\n            }\n            return this.signViaWindow(this.signingWindow, transaction);\n        });\n    }\n    signViaEndpoint(transaction) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const response = yield fetch(this.waxAutoSigningURL + \"signing\", {\n                    body: JSON.stringify({\n                        transaction: Object.values(transaction)\n                    }),\n                    credentials: \"include\",\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    },\n                    method: \"POST\"\n                });\n                if (!response.ok) {\n                    throw new Error(`Signing Endpoint Error ${response.status} ${response.statusText}`);\n                }\n                const data = yield response.json();\n                if (data.processed && data.processed.except) {\n                    throw new Error(data);\n                }\n                return this.receiveSignatures({ data });\n            }\n            catch (e) {\n                // clear the whitelist to make sure we don't repeatedly attempt blocked actions\n                this.whitelistedContracts = [];\n                throw e;\n            }\n        });\n    }\n    signViaWindow(window, transaction) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const confirmationWindow = yield this.waxEventSource.openEventSource(this.waxSigningURL + \"/cloud-wallet/signing/\", { type: \"TRANSACTION\", transaction }, window);\n            return this.waxEventSource.onceEvent(confirmationWindow, this.waxSigningURL, this.receiveSignatures.bind(this));\n        });\n    }\n    receiveSignatures(event) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (event.data.type === \"TX_SIGNED\") {\n                const { verified, signatures, whitelistedContracts } = event.data;\n                if (!verified || signatures == null) {\n                    throw new Error(\"User declined to sign the transaction\");\n                }\n                this.whitelistedContracts = whitelistedContracts || [];\n                return signatures;\n            }\n            else if (event.data.type !== \"READY\") {\n                throw new Error(`Unexpected response received when attempting signing: ${JSON.stringify(event.data, undefined, 2)}`);\n            }\n            return [];\n        });\n    }\n}\nexports.WaxJS = WaxJS;\n"]},"metadata":{},"sourceType":"script"}