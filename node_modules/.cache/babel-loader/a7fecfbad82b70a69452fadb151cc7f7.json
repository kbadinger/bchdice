{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nclass RpcQueue {\n  constructor(api, requestLimit = 4) {\n    this.api = api;\n    this.requestLimit = requestLimit;\n    this.elements = [];\n    this.interval = null;\n    this.preloadedCollections = {};\n  }\n\n  async fetchAsset(owner, assetID, useCache = true) {\n    return await this.fetch_single_row('assets', owner, assetID, data => {\n      return useCache || typeof data !== 'undefined' ? this.api.cache.getAsset(assetID, data) : null;\n    });\n  }\n\n  async fetchAccountAssets(account) {\n    const rows = await this.fetch_all_rows('assets', account, 'asset_id');\n    return rows.map(asset => {\n      return this.api.cache.getAsset(asset.asset_id, asset);\n    });\n  }\n\n  async fetchTemplate(collectionName, templateID, useCache = true) {\n    return await this.fetch_single_row('templates', collectionName, templateID, data => {\n      return useCache || typeof data !== 'undefined' ? this.api.cache.getTemplate(collectionName, templateID, data) : null;\n    });\n  }\n\n  async fetchSchema(collectionName, schemaName, useCache = true) {\n    return await this.fetch_single_row('schemas', collectionName, schemaName, data => {\n      return useCache || typeof data !== 'undefined' ? this.api.cache.getSchema(collectionName, schemaName, data) : null;\n    });\n  }\n\n  async fetchCollection(collectionName, useCache = true) {\n    return await this.fetch_single_row('collections', this.api.contract, collectionName, data => {\n      return useCache || typeof data !== 'undefined' ? this.api.cache.getCollection(collectionName, data) : null;\n    });\n  }\n\n  async fetchCollectionSchemas(collectionName) {\n    const rows = await this.fetch_all_rows('schemas', collectionName, 'schema_name');\n    return rows.map(schema => {\n      return this.api.cache.getSchema(collectionName, schema.schema_name, schema);\n    });\n  }\n\n  async fetchCollectionTemplates(collectionName) {\n    const rows = await this.fetch_all_rows('templates', collectionName, 'template_id');\n    return rows.map(template => {\n      return this.api.cache.getTemplate(collectionName, String(template.template_id), template);\n    });\n  }\n\n  async preloadCollection(collectionName, useCache = true) {\n    if (!useCache || !this.preloadedCollections[collectionName] || this.preloadedCollections[collectionName] + 15 * 60 * 1000 < Date.now()) {\n      await this.fetchCollectionSchemas(collectionName);\n      await this.fetchCollectionTemplates(collectionName);\n    }\n  }\n\n  async fetchOffer(offerID, useCache = true) {\n    return await this.fetch_single_row('offers', this.api.contract, offerID, data => {\n      return useCache || typeof data !== 'undefined' ? this.api.cache.getOffer(offerID, data) : null;\n    });\n  }\n\n  async fetchAccountOffers(account) {\n    const rows = await Promise.all([this.fetch_all_rows('offers', this.api.contract, 'offer_sender', account, account, 2, 'name'), this.fetch_all_rows('offers', this.api.contract, 'offer_recipient', account, account, 3, 'name')]);\n    const offers = rows[0].concat(rows[1]);\n    return offers.map(offer => {\n      return this.api.cache.getOffer(offer.offer_id, offer);\n    });\n  }\n\n  dequeue() {\n    if (this.interval) {\n      return;\n    }\n\n    this.interval = setInterval(async () => {\n      if (this.elements.length > 0) {\n        this.elements.shift()();\n      } else {\n        clearInterval(this.interval);\n        this.interval = null;\n      }\n    }, Math.ceil(1000 / this.requestLimit));\n  }\n\n  async fetch_single_row(table, scope, match, cacheFn, indexPosition = 1, keyType = '') {\n    return new Promise((resolve, reject) => {\n      let data = cacheFn();\n\n      if (data !== null) {\n        return resolve(data);\n      }\n\n      this.elements.push(async () => {\n        data = cacheFn();\n\n        if (data !== null) {\n          return resolve(data);\n        }\n\n        try {\n          const options = {\n            code: this.api.contract,\n            table,\n            scope,\n            limit: 1,\n            lower_bound: match,\n            upper_bound: match,\n            index_position: indexPosition,\n            key_type: keyType\n          };\n          const resp = await this.api.getTableRows(options);\n\n          if (resp.rows.length === 0) {\n            return reject(new Error('Row not found for ' + JSON.stringify(options)));\n          }\n\n          return resolve(cacheFn(resp.rows[0]));\n        } catch (e) {\n          return reject(e);\n        }\n      });\n      this.dequeue();\n    });\n  }\n\n  async fetch_all_rows(table, scope, tableKey, lowerBound = '', upperBound = '', indexPosition = 1, keyType = '') {\n    return new Promise(async (resolve, reject) => {\n      this.elements.push(async () => {\n        const resp = await this.api.getTableRows({\n          code: this.api.contract,\n          scope,\n          table,\n          lower_bound: lowerBound,\n          upper_bound: upperBound,\n          limit: 1000,\n          index_position: indexPosition,\n          key_type: keyType\n        });\n\n        if (resp.more && indexPosition === 1) {\n          this.elements.unshift(async () => {\n            try {\n              const next = await this.fetch_all_rows(table, scope, tableKey, resp.rows[resp.rows.length - 1][tableKey], upperBound, indexPosition, keyType);\n\n              if (next.length > 0) {\n                next.shift();\n              }\n\n              resolve(resp.rows.concat(next));\n            } catch (e) {\n              reject(e);\n            }\n          });\n          this.dequeue();\n        } else {\n          resolve(resp.rows);\n        }\n      });\n      this.dequeue();\n    });\n  }\n\n}\n\nexports.default = RpcQueue;","map":{"version":3,"sources":["/Users/kevinbadinger/eos/reactdemo/WCWReact/node_modules/atomicassets/build/API/Rpc/Queue.js"],"names":["Object","defineProperty","exports","value","RpcQueue","constructor","api","requestLimit","elements","interval","preloadedCollections","fetchAsset","owner","assetID","useCache","fetch_single_row","data","cache","getAsset","fetchAccountAssets","account","rows","fetch_all_rows","map","asset","asset_id","fetchTemplate","collectionName","templateID","getTemplate","fetchSchema","schemaName","getSchema","fetchCollection","contract","getCollection","fetchCollectionSchemas","schema","schema_name","fetchCollectionTemplates","template","String","template_id","preloadCollection","Date","now","fetchOffer","offerID","getOffer","fetchAccountOffers","Promise","all","offers","concat","offer","offer_id","dequeue","setInterval","length","shift","clearInterval","Math","ceil","table","scope","match","cacheFn","indexPosition","keyType","resolve","reject","push","options","code","limit","lower_bound","upper_bound","index_position","key_type","resp","getTableRows","Error","JSON","stringify","e","tableKey","lowerBound","upperBound","more","unshift","next","default"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass RpcQueue {\n    constructor(api, requestLimit = 4) {\n        this.api = api;\n        this.requestLimit = requestLimit;\n        this.elements = [];\n        this.interval = null;\n        this.preloadedCollections = {};\n    }\n    async fetchAsset(owner, assetID, useCache = true) {\n        return await this.fetch_single_row('assets', owner, assetID, (data) => {\n            return (useCache || typeof data !== 'undefined') ? this.api.cache.getAsset(assetID, data) : null;\n        });\n    }\n    async fetchAccountAssets(account) {\n        const rows = await this.fetch_all_rows('assets', account, 'asset_id');\n        return rows.map((asset) => {\n            return this.api.cache.getAsset(asset.asset_id, asset);\n        });\n    }\n    async fetchTemplate(collectionName, templateID, useCache = true) {\n        return await this.fetch_single_row('templates', collectionName, templateID, (data) => {\n            return (useCache || typeof data !== 'undefined') ? this.api.cache.getTemplate(collectionName, templateID, data) : null;\n        });\n    }\n    async fetchSchema(collectionName, schemaName, useCache = true) {\n        return await this.fetch_single_row('schemas', collectionName, schemaName, (data) => {\n            return (useCache || typeof data !== 'undefined') ? this.api.cache.getSchema(collectionName, schemaName, data) : null;\n        });\n    }\n    async fetchCollection(collectionName, useCache = true) {\n        return await this.fetch_single_row('collections', this.api.contract, collectionName, (data) => {\n            return (useCache || typeof data !== 'undefined') ? this.api.cache.getCollection(collectionName, data) : null;\n        });\n    }\n    async fetchCollectionSchemas(collectionName) {\n        const rows = await this.fetch_all_rows('schemas', collectionName, 'schema_name');\n        return rows.map((schema) => {\n            return this.api.cache.getSchema(collectionName, schema.schema_name, schema);\n        });\n    }\n    async fetchCollectionTemplates(collectionName) {\n        const rows = await this.fetch_all_rows('templates', collectionName, 'template_id');\n        return rows.map((template) => {\n            return this.api.cache.getTemplate(collectionName, String(template.template_id), template);\n        });\n    }\n    async preloadCollection(collectionName, useCache = true) {\n        if (!useCache || !this.preloadedCollections[collectionName] || this.preloadedCollections[collectionName] + 15 * 60 * 1000 < Date.now()) {\n            await this.fetchCollectionSchemas(collectionName);\n            await this.fetchCollectionTemplates(collectionName);\n        }\n    }\n    async fetchOffer(offerID, useCache = true) {\n        return await this.fetch_single_row('offers', this.api.contract, offerID, (data) => {\n            return (useCache || typeof data !== 'undefined') ? this.api.cache.getOffer(offerID, data) : null;\n        });\n    }\n    async fetchAccountOffers(account) {\n        const rows = await Promise.all([\n            this.fetch_all_rows('offers', this.api.contract, 'offer_sender', account, account, 2, 'name'),\n            this.fetch_all_rows('offers', this.api.contract, 'offer_recipient', account, account, 3, 'name')\n        ]);\n        const offers = rows[0].concat(rows[1]);\n        return offers.map((offer) => {\n            return this.api.cache.getOffer(offer.offer_id, offer);\n        });\n    }\n    dequeue() {\n        if (this.interval) {\n            return;\n        }\n        this.interval = setInterval(async () => {\n            if (this.elements.length > 0) {\n                this.elements.shift()();\n            }\n            else {\n                clearInterval(this.interval);\n                this.interval = null;\n            }\n        }, Math.ceil(1000 / this.requestLimit));\n    }\n    async fetch_single_row(table, scope, match, cacheFn, indexPosition = 1, keyType = '') {\n        return new Promise((resolve, reject) => {\n            let data = cacheFn();\n            if (data !== null) {\n                return resolve(data);\n            }\n            this.elements.push(async () => {\n                data = cacheFn();\n                if (data !== null) {\n                    return resolve(data);\n                }\n                try {\n                    const options = {\n                        code: this.api.contract, table, scope,\n                        limit: 1, lower_bound: match, upper_bound: match,\n                        index_position: indexPosition, key_type: keyType\n                    };\n                    const resp = await this.api.getTableRows(options);\n                    if (resp.rows.length === 0) {\n                        return reject(new Error('Row not found for ' + JSON.stringify(options)));\n                    }\n                    return resolve(cacheFn(resp.rows[0]));\n                }\n                catch (e) {\n                    return reject(e);\n                }\n            });\n            this.dequeue();\n        });\n    }\n    async fetch_all_rows(table, scope, tableKey, lowerBound = '', upperBound = '', indexPosition = 1, keyType = '') {\n        return new Promise(async (resolve, reject) => {\n            this.elements.push(async () => {\n                const resp = await this.api.getTableRows({\n                    code: this.api.contract, scope, table,\n                    lower_bound: lowerBound, upper_bound: upperBound, limit: 1000,\n                    index_position: indexPosition, key_type: keyType\n                });\n                if (resp.more && indexPosition === 1) {\n                    this.elements.unshift(async () => {\n                        try {\n                            const next = await this.fetch_all_rows(table, scope, tableKey, resp.rows[resp.rows.length - 1][tableKey], upperBound, indexPosition, keyType);\n                            if (next.length > 0) {\n                                next.shift();\n                            }\n                            resolve(resp.rows.concat(next));\n                        }\n                        catch (e) {\n                            reject(e);\n                        }\n                    });\n                    this.dequeue();\n                }\n                else {\n                    resolve(resp.rows);\n                }\n            });\n            this.dequeue();\n        });\n    }\n}\nexports.default = RpcQueue;\n"]},"metadata":{},"sourceType":"script"}