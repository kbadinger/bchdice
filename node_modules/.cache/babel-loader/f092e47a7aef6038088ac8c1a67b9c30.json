{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst SchemaError_1 = __importDefault(require(\"../Errors/SchemaError\"));\n\nconst Binary_1 = require(\"../Serialization/Binary\");\n\nclass MappingSchema {\n  constructor(attributes) {\n    this.attributes = attributes;\n    this.reserved = 4;\n  }\n\n  deserialize(state, upwardsCompatible = false) {\n    const object = {};\n\n    while (state.position < state.data.length) {\n      const identifier = Binary_1.varint_decode(state);\n\n      if (identifier.equals(0)) {\n        break;\n      }\n\n      const attribute = this.getAttribute(identifier.toJSNumber(), !upwardsCompatible);\n\n      if (attribute) {\n        object[attribute.name] = attribute.value.deserialize(state);\n      }\n    }\n\n    return object;\n  }\n\n  serialize(object) {\n    const data = [];\n\n    for (let i = 0; i < this.attributes.length; i++) {\n      const attribute = this.attributes[i];\n\n      if (typeof object[attribute.name] === 'undefined') {\n        continue;\n      }\n\n      data.push(Binary_1.varint_encode(i + this.reserved));\n      data.push(attribute.value.serialize(object[attribute.name]));\n    }\n\n    data.push(Binary_1.varint_encode(0));\n    return Binary_1.concat_byte_arrays(data);\n  }\n\n  getAttribute(identifier, throwError = true) {\n    const attributeID = identifier - this.reserved;\n\n    if (attributeID >= this.attributes.length) {\n      if (throwError) {\n        throw new SchemaError_1.default('attribute does not exists');\n      }\n\n      return;\n    }\n\n    return this.attributes[Number(attributeID)];\n  }\n\n}\n\nexports.default = MappingSchema;","map":{"version":3,"sources":["/Users/kevinbadinger/eos/reactdemo/WCWReact/node_modules/atomicassets/build/Schema/MappingSchema.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","SchemaError_1","require","Binary_1","MappingSchema","constructor","attributes","reserved","deserialize","state","upwardsCompatible","object","position","data","length","identifier","varint_decode","equals","attribute","getAttribute","toJSNumber","name","serialize","i","push","varint_encode","concat_byte_arrays","throwError","attributeID","default","Number"],"mappings":"AAAA;;AACA,IAAIA,eAAe,GAAI,QAAQ,KAAKA,eAAd,IAAkC,UAAUC,GAAV,EAAe;AACnE,SAAQA,GAAG,IAAIA,GAAG,CAACC,UAAZ,GAA0BD,GAA1B,GAAgC;AAAE,eAAWA;AAAb,GAAvC;AACH,CAFD;;AAGAE,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,aAAa,GAAGP,eAAe,CAACQ,OAAO,CAAC,uBAAD,CAAR,CAArC;;AACA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,yBAAD,CAAxB;;AACA,MAAME,aAAN,CAAoB;AAChBC,EAAAA,WAAW,CAACC,UAAD,EAAa;AACpB,SAAKA,UAAL,GAAkBA,UAAlB;AACA,SAAKC,QAAL,GAAgB,CAAhB;AACH;;AACDC,EAAAA,WAAW,CAACC,KAAD,EAAQC,iBAAiB,GAAG,KAA5B,EAAmC;AAC1C,UAAMC,MAAM,GAAG,EAAf;;AACA,WAAOF,KAAK,CAACG,QAAN,GAAiBH,KAAK,CAACI,IAAN,CAAWC,MAAnC,EAA2C;AACvC,YAAMC,UAAU,GAAGZ,QAAQ,CAACa,aAAT,CAAuBP,KAAvB,CAAnB;;AACA,UAAIM,UAAU,CAACE,MAAX,CAAkB,CAAlB,CAAJ,EAA0B;AACtB;AACH;;AACD,YAAMC,SAAS,GAAG,KAAKC,YAAL,CAAkBJ,UAAU,CAACK,UAAX,EAAlB,EAA2C,CAACV,iBAA5C,CAAlB;;AACA,UAAIQ,SAAJ,EAAe;AACXP,QAAAA,MAAM,CAACO,SAAS,CAACG,IAAX,CAAN,GAAyBH,SAAS,CAAClB,KAAV,CAAgBQ,WAAhB,CAA4BC,KAA5B,CAAzB;AACH;AACJ;;AACD,WAAOE,MAAP;AACH;;AACDW,EAAAA,SAAS,CAACX,MAAD,EAAS;AACd,UAAME,IAAI,GAAG,EAAb;;AACA,SAAK,IAAIU,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKjB,UAAL,CAAgBQ,MAApC,EAA4CS,CAAC,EAA7C,EAAiD;AAC7C,YAAML,SAAS,GAAG,KAAKZ,UAAL,CAAgBiB,CAAhB,CAAlB;;AACA,UAAI,OAAOZ,MAAM,CAACO,SAAS,CAACG,IAAX,CAAb,KAAkC,WAAtC,EAAmD;AAC/C;AACH;;AACDR,MAAAA,IAAI,CAACW,IAAL,CAAUrB,QAAQ,CAACsB,aAAT,CAAuBF,CAAC,GAAG,KAAKhB,QAAhC,CAAV;AACAM,MAAAA,IAAI,CAACW,IAAL,CAAUN,SAAS,CAAClB,KAAV,CAAgBsB,SAAhB,CAA0BX,MAAM,CAACO,SAAS,CAACG,IAAX,CAAhC,CAAV;AACH;;AACDR,IAAAA,IAAI,CAACW,IAAL,CAAUrB,QAAQ,CAACsB,aAAT,CAAuB,CAAvB,CAAV;AACA,WAAOtB,QAAQ,CAACuB,kBAAT,CAA4Bb,IAA5B,CAAP;AACH;;AACDM,EAAAA,YAAY,CAACJ,UAAD,EAAaY,UAAU,GAAG,IAA1B,EAAgC;AACxC,UAAMC,WAAW,GAAGb,UAAU,GAAG,KAAKR,QAAtC;;AACA,QAAIqB,WAAW,IAAI,KAAKtB,UAAL,CAAgBQ,MAAnC,EAA2C;AACvC,UAAIa,UAAJ,EAAgB;AACZ,cAAM,IAAI1B,aAAa,CAAC4B,OAAlB,CAA0B,2BAA1B,CAAN;AACH;;AACD;AACH;;AACD,WAAO,KAAKvB,UAAL,CAAgBwB,MAAM,CAACF,WAAD,CAAtB,CAAP;AACH;;AAzCe;;AA2CpB7B,OAAO,CAAC8B,OAAR,GAAkBzB,aAAlB","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst SchemaError_1 = __importDefault(require(\"../Errors/SchemaError\"));\nconst Binary_1 = require(\"../Serialization/Binary\");\nclass MappingSchema {\n    constructor(attributes) {\n        this.attributes = attributes;\n        this.reserved = 4;\n    }\n    deserialize(state, upwardsCompatible = false) {\n        const object = {};\n        while (state.position < state.data.length) {\n            const identifier = Binary_1.varint_decode(state);\n            if (identifier.equals(0)) {\n                break;\n            }\n            const attribute = this.getAttribute(identifier.toJSNumber(), !upwardsCompatible);\n            if (attribute) {\n                object[attribute.name] = attribute.value.deserialize(state);\n            }\n        }\n        return object;\n    }\n    serialize(object) {\n        const data = [];\n        for (let i = 0; i < this.attributes.length; i++) {\n            const attribute = this.attributes[i];\n            if (typeof object[attribute.name] === 'undefined') {\n                continue;\n            }\n            data.push(Binary_1.varint_encode(i + this.reserved));\n            data.push(attribute.value.serialize(object[attribute.name]));\n        }\n        data.push(Binary_1.varint_encode(0));\n        return Binary_1.concat_byte_arrays(data);\n    }\n    getAttribute(identifier, throwError = true) {\n        const attributeID = identifier - this.reserved;\n        if (attributeID >= this.attributes.length) {\n            if (throwError) {\n                throw new SchemaError_1.default('attribute does not exists');\n            }\n            return;\n        }\n        return this.attributes[Number(attributeID)];\n    }\n}\nexports.default = MappingSchema;\n"]},"metadata":{},"sourceType":"script"}