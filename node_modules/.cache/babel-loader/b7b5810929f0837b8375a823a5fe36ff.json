{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst Schema_1 = require(\"../../Schema\");\n\nconst Serialization_1 = require(\"../../Serialization\");\n\nclass RpcCollection {\n  constructor(api, name, data, cache = true) {\n    this.api = api;\n    this.name = name;\n    this._data = new Promise(async (resolve, reject) => {\n      if (data) {\n        resolve(data);\n      } else {\n        try {\n          resolve(await api.queue.fetchCollection(name, cache));\n        } catch (e) {\n          reject(e);\n        }\n      }\n    });\n  }\n\n  async author() {\n    return (await this._data).author;\n  }\n\n  async allowNotify() {\n    return (await this._data).allow_notify;\n  }\n\n  async authorizedAccounts() {\n    return (await this._data).authorized_accounts;\n  }\n\n  async notifyAccounts() {\n    return (await this._data).notify_accounts;\n  }\n\n  async marketFee() {\n    return Number((await this._data).market_fee);\n  }\n\n  async data() {\n    return Serialization_1.deserialize((await this._data).serialized_data, Schema_1.ObjectSchema((await this.api.config()).collection_format));\n  }\n\n  async toObject() {\n    return {\n      collection_name: this.name,\n      author: await this.author(),\n      allowNotify: await this.allowNotify(),\n      authorizedAccounts: await this.authorizedAccounts(),\n      notifyAccounts: await this.notifyAccounts(),\n      marketFee: await this.marketFee(),\n      data: await this.data()\n    };\n  }\n\n}\n\nexports.default = RpcCollection;","map":{"version":3,"sources":["/Users/kevinbadinger/eos/reactdemo/WCWReact/node_modules/atomicassets/build/API/Rpc/Collection.js"],"names":["Object","defineProperty","exports","value","Schema_1","require","Serialization_1","RpcCollection","constructor","api","name","data","cache","_data","Promise","resolve","reject","queue","fetchCollection","e","author","allowNotify","allow_notify","authorizedAccounts","authorized_accounts","notifyAccounts","notify_accounts","marketFee","Number","market_fee","deserialize","serialized_data","ObjectSchema","config","collection_format","toObject","collection_name","default"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,QAAQ,GAAGC,OAAO,CAAC,cAAD,CAAxB;;AACA,MAAMC,eAAe,GAAGD,OAAO,CAAC,qBAAD,CAA/B;;AACA,MAAME,aAAN,CAAoB;AAChBC,EAAAA,WAAW,CAACC,GAAD,EAAMC,IAAN,EAAYC,IAAZ,EAAkBC,KAAK,GAAG,IAA1B,EAAgC;AACvC,SAAKH,GAAL,GAAWA,GAAX;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKG,KAAL,GAAa,IAAIC,OAAJ,CAAY,OAAOC,OAAP,EAAgBC,MAAhB,KAA2B;AAChD,UAAIL,IAAJ,EAAU;AACNI,QAAAA,OAAO,CAACJ,IAAD,CAAP;AACH,OAFD,MAGK;AACD,YAAI;AACAI,UAAAA,OAAO,CAAC,MAAMN,GAAG,CAACQ,KAAJ,CAAUC,eAAV,CAA0BR,IAA1B,EAAgCE,KAAhC,CAAP,CAAP;AACH,SAFD,CAGA,OAAOO,CAAP,EAAU;AACNH,UAAAA,MAAM,CAACG,CAAD,CAAN;AACH;AACJ;AACJ,KAZY,CAAb;AAaH;;AACW,QAANC,MAAM,GAAG;AACX,WAAO,CAAC,MAAM,KAAKP,KAAZ,EAAmBO,MAA1B;AACH;;AACgB,QAAXC,WAAW,GAAG;AAChB,WAAO,CAAC,MAAM,KAAKR,KAAZ,EAAmBS,YAA1B;AACH;;AACuB,QAAlBC,kBAAkB,GAAG;AACvB,WAAO,CAAC,MAAM,KAAKV,KAAZ,EAAmBW,mBAA1B;AACH;;AACmB,QAAdC,cAAc,GAAG;AACnB,WAAO,CAAC,MAAM,KAAKZ,KAAZ,EAAmBa,eAA1B;AACH;;AACc,QAATC,SAAS,GAAG;AACd,WAAOC,MAAM,CAAC,CAAC,MAAM,KAAKf,KAAZ,EAAmBgB,UAApB,CAAb;AACH;;AACS,QAAJlB,IAAI,GAAG;AACT,WAAOL,eAAe,CAACwB,WAAhB,CAA4B,CAAC,MAAM,KAAKjB,KAAZ,EAAmBkB,eAA/C,EAAgE3B,QAAQ,CAAC4B,YAAT,CAAsB,CAAC,MAAM,KAAKvB,GAAL,CAASwB,MAAT,EAAP,EAA0BC,iBAAhD,CAAhE,CAAP;AACH;;AACa,QAARC,QAAQ,GAAG;AACb,WAAO;AACHC,MAAAA,eAAe,EAAE,KAAK1B,IADnB;AAEHU,MAAAA,MAAM,EAAE,MAAM,KAAKA,MAAL,EAFX;AAGHC,MAAAA,WAAW,EAAE,MAAM,KAAKA,WAAL,EAHhB;AAIHE,MAAAA,kBAAkB,EAAE,MAAM,KAAKA,kBAAL,EAJvB;AAKHE,MAAAA,cAAc,EAAE,MAAM,KAAKA,cAAL,EALnB;AAMHE,MAAAA,SAAS,EAAE,MAAM,KAAKA,SAAL,EANd;AAOHhB,MAAAA,IAAI,EAAE,MAAM,KAAKA,IAAL;AAPT,KAAP;AASH;;AA9Ce;;AAgDpBT,OAAO,CAACmC,OAAR,GAAkB9B,aAAlB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Schema_1 = require(\"../../Schema\");\nconst Serialization_1 = require(\"../../Serialization\");\nclass RpcCollection {\n    constructor(api, name, data, cache = true) {\n        this.api = api;\n        this.name = name;\n        this._data = new Promise(async (resolve, reject) => {\n            if (data) {\n                resolve(data);\n            }\n            else {\n                try {\n                    resolve(await api.queue.fetchCollection(name, cache));\n                }\n                catch (e) {\n                    reject(e);\n                }\n            }\n        });\n    }\n    async author() {\n        return (await this._data).author;\n    }\n    async allowNotify() {\n        return (await this._data).allow_notify;\n    }\n    async authorizedAccounts() {\n        return (await this._data).authorized_accounts;\n    }\n    async notifyAccounts() {\n        return (await this._data).notify_accounts;\n    }\n    async marketFee() {\n        return Number((await this._data).market_fee);\n    }\n    async data() {\n        return Serialization_1.deserialize((await this._data).serialized_data, Schema_1.ObjectSchema((await this.api.config()).collection_format));\n    }\n    async toObject() {\n        return {\n            collection_name: this.name,\n            author: await this.author(),\n            allowNotify: await this.allowNotify(),\n            authorizedAccounts: await this.authorizedAccounts(),\n            notifyAccounts: await this.notifyAccounts(),\n            marketFee: await this.marketFee(),\n            data: await this.data()\n        };\n    }\n}\nexports.default = RpcCollection;\n"]},"metadata":{},"sourceType":"script"}