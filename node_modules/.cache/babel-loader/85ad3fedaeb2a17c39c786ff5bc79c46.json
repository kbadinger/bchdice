{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/kevinbadinger/eos/reactdemo/WCWReact/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.byte_vector_to_int = exports.int_to_byte_vector = exports.concat_byte_arrays = exports.hex_encode = exports.hex_decode = exports.base58_encode = exports.base58_decode = exports.zigzag_decode = exports.zigzag_encode = exports.integer_unsign = exports.integer_sign = exports.varint_decode = exports.varint_encode = void 0;\n\nvar big_integer_1 = __importDefault(require(\"big-integer\"));\n\nvar DeserializationError_1 = __importDefault(require(\"../Errors/DeserializationError\"));\n\nvar SerializationError_1 = __importDefault(require(\"../Errors/SerializationError\"));\n\nvar Base_1 = __importDefault(require(\"./Coders/Base\"));\n\nfunction varint_encode(input) {\n  var bytes = [];\n  var n = big_integer_1.default(input);\n\n  if (n.lesser(0)) {\n    throw new SerializationError_1.default('cant pack negative integer');\n  }\n\n  while (true) {\n    var byte = n.and(0x7F);\n    n = n.shiftRight(7);\n\n    if (n.equals(0)) {\n      bytes.push(byte.toJSNumber());\n      break;\n    }\n\n    bytes.push(byte.toJSNumber() + 128);\n  }\n\n  return new Uint8Array(bytes);\n}\n\nexports.varint_encode = varint_encode;\n\nfunction varint_decode(state) {\n  var result = big_integer_1.default(0);\n\n  for (var i = 0; true; i++) {\n    if (state.position >= state.data.length) {\n      throw new DeserializationError_1.default('failed to unpack integer');\n    }\n\n    var byte = big_integer_1.default(state.data[state.position]);\n    state.position += 1;\n\n    if (byte.lesser(128)) {\n      result = result.plus(byte.shiftLeft(7 * i));\n      break;\n    }\n\n    result = result.plus(byte.and(0x7F).shiftLeft(7 * i));\n  }\n\n  return result;\n}\n\nexports.varint_decode = varint_decode;\n\nfunction integer_sign(input, size) {\n  var n = big_integer_1.default(input);\n\n  if (n.greaterOrEquals(big_integer_1.default(2).pow(8 * size - 1))) {\n    throw new Error('cannot sign integer: too big');\n  }\n\n  if (n.greaterOrEquals(0)) {\n    return n;\n  }\n\n  return n.negate().xor(big_integer_1.default(2).pow(8 * size).minus(1)).plus(1);\n}\n\nexports.integer_sign = integer_sign;\n\nfunction integer_unsign(input, size) {\n  var n = big_integer_1.default(input);\n\n  if (n.greater(big_integer_1.default(2).pow(8 * size))) {\n    throw new Error('cannot unsign integer: too big');\n  }\n\n  if (n.greater(big_integer_1.default(2).pow(8 * size - 1))) {\n    return n.minus(1).xor(big_integer_1.default(2).pow(8 * size).minus(1)).negate();\n  }\n\n  return n;\n}\n\nexports.integer_unsign = integer_unsign;\n\nfunction zigzag_encode(input) {\n  var n = big_integer_1.default(input);\n\n  if (n.lesser(0)) {\n    return n.plus(1).multiply(-2).plus(1);\n  }\n\n  return n.multiply(2);\n}\n\nexports.zigzag_encode = zigzag_encode;\n\nfunction zigzag_decode(input) {\n  var n = big_integer_1.default(input);\n\n  if (n.mod(2).equals(0)) {\n    return n.divmod(2).quotient;\n  }\n\n  return n.divmod(2).quotient.multiply(-1).minus(1);\n}\n\nexports.zigzag_decode = zigzag_decode;\nvar bs58 = new Base_1.default('123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz');\n\nfunction base58_decode(data) {\n  return bs58.decode(data);\n}\n\nexports.base58_decode = base58_decode;\n\nfunction base58_encode(data) {\n  return bs58.encode(data);\n}\n\nexports.base58_encode = base58_encode;\n\nfunction hex_decode(hex) {\n  var bytes = hex.match(/.{1,2}/g);\n\n  if (!bytes) {\n    return new Uint8Array(0);\n  }\n\n  return new Uint8Array(bytes.map(function (byte) {\n    return parseInt(byte, 16);\n  }));\n}\n\nexports.hex_decode = hex_decode;\n\nfunction hex_encode(bytes) {\n  return bytes.reduce(function (str, byte) {\n    return str + byte.toString(16).padStart(2, '0');\n  }, '');\n}\n\nexports.hex_encode = hex_encode;\n\nfunction concat_byte_arrays(arr) {\n  // concat all bytearrays into one array\n  var data = new Uint8Array(arr.reduce(function (acc, val) {\n    return acc + val.length;\n  }, 0));\n  var offset = 0;\n\n  var _iterator = _createForOfIteratorHelper(arr),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var bytes = _step.value;\n      data.set(bytes, offset);\n      offset += bytes.length;\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return data;\n}\n\nexports.concat_byte_arrays = concat_byte_arrays;\n\nfunction int_to_byte_vector(n) {\n  var bytes = [];\n  var num = big_integer_1.default(n);\n\n  while (num.notEquals(0)) {\n    bytes.push(num.and(0xFF).toJSNumber());\n    num = num.shiftRight(8);\n  }\n\n  return new Uint8Array(bytes);\n}\n\nexports.int_to_byte_vector = int_to_byte_vector;\n\nfunction byte_vector_to_int(bytes) {\n  var num = big_integer_1.default(0);\n\n  for (var i = 0; i < bytes.length; i++) {\n    num = num.plus(big_integer_1.default(bytes[i]).shiftLeft(8 * i));\n  }\n\n  return num.toJSNumber();\n}\n\nexports.byte_vector_to_int = byte_vector_to_int;","map":{"version":3,"sources":["/Users/kevinbadinger/eos/reactdemo/WCWReact/node_modules/atomicassets/build/Serialization/Binary.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","byte_vector_to_int","int_to_byte_vector","concat_byte_arrays","hex_encode","hex_decode","base58_encode","base58_decode","zigzag_decode","zigzag_encode","integer_unsign","integer_sign","varint_decode","varint_encode","big_integer_1","require","DeserializationError_1","SerializationError_1","Base_1","input","bytes","n","default","lesser","byte","and","shiftRight","equals","push","toJSNumber","Uint8Array","state","result","i","position","data","length","plus","shiftLeft","size","greaterOrEquals","pow","Error","negate","xor","minus","greater","multiply","divmod","quotient","bs58","decode","encode","hex","match","map","parseInt","reduce","str","toString","padStart","arr","acc","val","offset","set","num","notEquals"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.byte_vector_to_int = exports.int_to_byte_vector = exports.concat_byte_arrays = exports.hex_encode = exports.hex_decode = exports.base58_encode = exports.base58_decode = exports.zigzag_decode = exports.zigzag_encode = exports.integer_unsign = exports.integer_sign = exports.varint_decode = exports.varint_encode = void 0;\nconst big_integer_1 = __importDefault(require(\"big-integer\"));\nconst DeserializationError_1 = __importDefault(require(\"../Errors/DeserializationError\"));\nconst SerializationError_1 = __importDefault(require(\"../Errors/SerializationError\"));\nconst Base_1 = __importDefault(require(\"./Coders/Base\"));\nfunction varint_encode(input) {\n    const bytes = [];\n    let n = big_integer_1.default(input);\n    if (n.lesser(0)) {\n        throw new SerializationError_1.default('cant pack negative integer');\n    }\n    while (true) {\n        const byte = n.and(0x7F);\n        n = n.shiftRight(7);\n        if (n.equals(0)) {\n            bytes.push(byte.toJSNumber());\n            break;\n        }\n        bytes.push(byte.toJSNumber() + 128);\n    }\n    return new Uint8Array(bytes);\n}\nexports.varint_encode = varint_encode;\nfunction varint_decode(state) {\n    let result = big_integer_1.default(0);\n    for (let i = 0; true; i++) {\n        if (state.position >= state.data.length) {\n            throw new DeserializationError_1.default('failed to unpack integer');\n        }\n        const byte = big_integer_1.default(state.data[state.position]);\n        state.position += 1;\n        if (byte.lesser(128)) {\n            result = result.plus(byte.shiftLeft(7 * i));\n            break;\n        }\n        result = result.plus(byte.and(0x7F).shiftLeft(7 * i));\n    }\n    return result;\n}\nexports.varint_decode = varint_decode;\nfunction integer_sign(input, size) {\n    const n = big_integer_1.default(input);\n    if (n.greaterOrEquals(big_integer_1.default(2).pow(8 * size - 1))) {\n        throw new Error('cannot sign integer: too big');\n    }\n    if (n.greaterOrEquals(0)) {\n        return n;\n    }\n    return n.negate().xor(big_integer_1.default(2).pow(8 * size).minus(1)).plus(1);\n}\nexports.integer_sign = integer_sign;\nfunction integer_unsign(input, size) {\n    const n = big_integer_1.default(input);\n    if (n.greater(big_integer_1.default(2).pow(8 * size))) {\n        throw new Error('cannot unsign integer: too big');\n    }\n    if (n.greater(big_integer_1.default(2).pow(8 * size - 1))) {\n        return n.minus(1).xor(big_integer_1.default(2).pow(8 * size).minus(1)).negate();\n    }\n    return n;\n}\nexports.integer_unsign = integer_unsign;\nfunction zigzag_encode(input) {\n    const n = big_integer_1.default(input);\n    if (n.lesser(0)) {\n        return n.plus(1).multiply(-2).plus(1);\n    }\n    return n.multiply(2);\n}\nexports.zigzag_encode = zigzag_encode;\nfunction zigzag_decode(input) {\n    const n = big_integer_1.default(input);\n    if (n.mod(2).equals(0)) {\n        return n.divmod(2).quotient;\n    }\n    return n.divmod(2).quotient.multiply(-1).minus(1);\n}\nexports.zigzag_decode = zigzag_decode;\nconst bs58 = new Base_1.default('123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz');\nfunction base58_decode(data) {\n    return bs58.decode(data);\n}\nexports.base58_decode = base58_decode;\nfunction base58_encode(data) {\n    return bs58.encode(data);\n}\nexports.base58_encode = base58_encode;\nfunction hex_decode(hex) {\n    const bytes = hex.match(/.{1,2}/g);\n    if (!bytes) {\n        return new Uint8Array(0);\n    }\n    return new Uint8Array(bytes.map((byte) => parseInt(byte, 16)));\n}\nexports.hex_decode = hex_decode;\nfunction hex_encode(bytes) {\n    return bytes.reduce((str, byte) => str + byte.toString(16).padStart(2, '0'), '');\n}\nexports.hex_encode = hex_encode;\nfunction concat_byte_arrays(arr) {\n    // concat all bytearrays into one array\n    const data = new Uint8Array(arr.reduce((acc, val) => acc + val.length, 0));\n    let offset = 0;\n    for (const bytes of arr) {\n        data.set(bytes, offset);\n        offset += bytes.length;\n    }\n    return data;\n}\nexports.concat_byte_arrays = concat_byte_arrays;\nfunction int_to_byte_vector(n) {\n    const bytes = [];\n    let num = big_integer_1.default(n);\n    while (num.notEquals(0)) {\n        bytes.push(num.and(0xFF).toJSNumber());\n        num = num.shiftRight(8);\n    }\n    return new Uint8Array(bytes);\n}\nexports.int_to_byte_vector = int_to_byte_vector;\nfunction byte_vector_to_int(bytes) {\n    let num = big_integer_1.default(0);\n    for (let i = 0; i < bytes.length; i++) {\n        num = num.plus(big_integer_1.default(bytes[i]).shiftLeft(8 * i));\n    }\n    return num.toJSNumber();\n}\nexports.byte_vector_to_int = byte_vector_to_int;\n"]},"metadata":{},"sourceType":"script"}