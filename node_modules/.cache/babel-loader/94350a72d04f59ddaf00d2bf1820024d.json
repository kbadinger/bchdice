{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toAttributeMap = exports.ActionGenerator = void 0;\n\nconst SerializationError_1 = __importDefault(require(\"../Errors/SerializationError\"));\n/* tslint:disable:variable-name */\n\n\nclass ActionGenerator {\n  constructor(contract) {\n    this.contract = contract;\n  }\n\n  async acceptoffer(authorization, offer_id) {\n    return this._pack(authorization, 'acceptoffer', {\n      offer_id\n    });\n  }\n\n  async addcolauth(authorization, collection_name, account_to_add) {\n    return this._pack(authorization, 'addcolauth', {\n      collection_name,\n      account_to_add\n    });\n  }\n\n  async addconftoken(authorization, token_contract, token_symbol) {\n    return this._pack(authorization, 'addconftoken', {\n      token_contract,\n      token_symbol\n    });\n  }\n\n  async addnotifyacc(authorization, collection_name, account_to_add) {\n    return this._pack(authorization, 'addnotifyacc', {\n      collection_name,\n      account_to_add\n    });\n  }\n\n  async announcedepo(authorization, owner, symbol_to_announce) {\n    return this._pack(authorization, 'announcedepo', {\n      owner,\n      symbol_to_announce\n    });\n  }\n\n  async backasset(authorization, payer, asset_owner, asset_id, token_to_back) {\n    return this._pack(authorization, 'backasset', {\n      payer,\n      asset_owner,\n      asset_id,\n      token_to_back\n    });\n  }\n\n  async burnasset(authorization, asset_owner, asset_id) {\n    return this._pack(authorization, 'burnasset', {\n      asset_owner,\n      asset_id\n    });\n  }\n\n  async canceloffer(authorization, offer_id) {\n    return this._pack(authorization, 'canceloffer', {\n      offer_id\n    });\n  }\n\n  async createcol(authorization, author, collection_name, allow_notify, authorized_accounts, notify_accounts, market_fee, data) {\n    return this._pack(authorization, 'createcol', {\n      author,\n      collection_name,\n      allow_notify,\n      authorized_accounts,\n      notify_accounts,\n      market_fee,\n      data\n    });\n  }\n\n  async createoffer(authorization, sender, recipient, sender_asset_ids, recipient_asset_ids, memo) {\n    return this._pack(authorization, 'createoffer', {\n      sender,\n      recipient,\n      sender_asset_ids,\n      recipient_asset_ids,\n      memo\n    });\n  }\n\n  async createtempl(authorization, authorized_creator, collection_name, schema_name, transferable, burnable, max_supply, immutable_data) {\n    return this._pack(authorization, 'createtempl', {\n      authorized_creator,\n      collection_name,\n      schema_name,\n      transferable,\n      burnable,\n      max_supply,\n      immutable_data\n    });\n  }\n\n  async createschema(authorization, authorized_creator, collection_name, schema_name, schema_format) {\n    return this._pack(authorization, 'createschema', {\n      authorized_creator,\n      collection_name,\n      schema_name,\n      schema_format\n    });\n  }\n\n  async declineoffer(authorization, offer_id) {\n    return this._pack(authorization, 'declineoffer', {\n      offer_id\n    });\n  }\n\n  async extendschema(authorization, authorized_editor, collection_name, schema_name, schema_format_extension) {\n    return this._pack(authorization, 'extendschema', {\n      authorized_editor,\n      collection_name,\n      schema_name,\n      schema_format_extension\n    });\n  }\n\n  async forbidnotify(authorization, collection_name) {\n    return this._pack(authorization, 'forbidnotify', {\n      collection_name\n    });\n  }\n\n  async locktemplate(authorization, authorized_editor, collection_name, template_id) {\n    return this._pack(authorization, 'locktemplate', {\n      authorized_editor,\n      collection_name,\n      template_id\n    });\n  }\n\n  async mintasset(authorization, authorized_minter, collection_name, schema_name, template_id, new_asset_owner, immutable_data, mutable_data, tokens_to_back) {\n    return this._pack(authorization, 'mintasset', {\n      authorized_minter,\n      collection_name,\n      schema_name,\n      template_id,\n      new_asset_owner,\n      immutable_data,\n      mutable_data,\n      tokens_to_back\n    });\n  }\n\n  async payofferram(authorization, payer, offer_id) {\n    return this._pack(authorization, 'payofferram', {\n      payer,\n      offer_id\n    });\n  }\n\n  async remcolauth(authorization, collection_name, account_to_remove) {\n    return this._pack(authorization, 'remcolauth', {\n      collection_name,\n      account_to_remove\n    });\n  }\n\n  async remnotifyacc(authorization, collection_name, account_to_remove) {\n    return this._pack(authorization, 'remnotifyacc', {\n      collection_name,\n      account_to_remove\n    });\n  }\n\n  async setassetdata(authorization, authorized_editor, asset_owner, asset_id, new_mutable_data) {\n    return this._pack(authorization, 'setassetdata', {\n      authorized_editor,\n      asset_owner,\n      asset_id,\n      new_mutable_data\n    });\n  }\n\n  async setcoldata(authorization, collection_name, data) {\n    return this._pack(authorization, 'setcoldata', {\n      collection_name,\n      data\n    });\n  }\n\n  async setmarketfee(authorization, collection_name, market_fee) {\n    return this._pack(authorization, 'setmarketfee', {\n      collection_name,\n      market_fee\n    });\n  }\n\n  async transfer(authorization, account_from, account_to, asset_ids, memo) {\n    return this._pack(authorization, 'transfer', {\n      from: account_from,\n      to: account_to,\n      asset_ids,\n      memo\n    });\n  }\n\n  async withdraw(authorization, owner, token_to_withdraw) {\n    return this._pack(authorization, 'withdraw', {\n      owner,\n      token_to_withdraw\n    });\n  }\n\n  _pack(authorization, name, data) {\n    return [{\n      account: this.contract,\n      name,\n      authorization,\n      data\n    }];\n  }\n\n}\n\nexports.ActionGenerator = ActionGenerator;\n\nfunction toAttributeMap(obj, schema) {\n  const types = {};\n  const result = [];\n\n  for (const row of schema) {\n    types[row.name] = row.type;\n  }\n\n  const keys = Object.keys(obj);\n\n  for (const key of keys) {\n    if (typeof types[key] !== 'undefined') {\n      throw new SerializationError_1.default('field not defined in schema');\n    }\n\n    result.push({\n      key,\n      value: [types[key], obj[key]]\n    });\n  }\n\n  return result;\n}\n\nexports.toAttributeMap = toAttributeMap;","map":{"version":3,"sources":["/Users/kevinbadinger/eos/reactdemo/WCWReact/node_modules/atomicassets/build/Actions/Generator.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","toAttributeMap","ActionGenerator","SerializationError_1","require","constructor","contract","acceptoffer","authorization","offer_id","_pack","addcolauth","collection_name","account_to_add","addconftoken","token_contract","token_symbol","addnotifyacc","announcedepo","owner","symbol_to_announce","backasset","payer","asset_owner","asset_id","token_to_back","burnasset","canceloffer","createcol","author","allow_notify","authorized_accounts","notify_accounts","market_fee","data","createoffer","sender","recipient","sender_asset_ids","recipient_asset_ids","memo","createtempl","authorized_creator","schema_name","transferable","burnable","max_supply","immutable_data","createschema","schema_format","declineoffer","extendschema","authorized_editor","schema_format_extension","forbidnotify","locktemplate","template_id","mintasset","authorized_minter","new_asset_owner","mutable_data","tokens_to_back","payofferram","remcolauth","account_to_remove","remnotifyacc","setassetdata","new_mutable_data","setcoldata","setmarketfee","transfer","account_from","account_to","asset_ids","from","to","withdraw","token_to_withdraw","name","account","obj","schema","types","result","row","type","keys","key","default","push"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.toAttributeMap = exports.ActionGenerator = void 0;\nconst SerializationError_1 = __importDefault(require(\"../Errors/SerializationError\"));\n/* tslint:disable:variable-name */\nclass ActionGenerator {\n    constructor(contract) {\n        this.contract = contract;\n    }\n    async acceptoffer(authorization, offer_id) {\n        return this._pack(authorization, 'acceptoffer', { offer_id });\n    }\n    async addcolauth(authorization, collection_name, account_to_add) {\n        return this._pack(authorization, 'addcolauth', { collection_name, account_to_add });\n    }\n    async addconftoken(authorization, token_contract, token_symbol) {\n        return this._pack(authorization, 'addconftoken', { token_contract, token_symbol });\n    }\n    async addnotifyacc(authorization, collection_name, account_to_add) {\n        return this._pack(authorization, 'addnotifyacc', { collection_name, account_to_add });\n    }\n    async announcedepo(authorization, owner, symbol_to_announce) {\n        return this._pack(authorization, 'announcedepo', { owner, symbol_to_announce });\n    }\n    async backasset(authorization, payer, asset_owner, asset_id, token_to_back) {\n        return this._pack(authorization, 'backasset', { payer, asset_owner, asset_id, token_to_back });\n    }\n    async burnasset(authorization, asset_owner, asset_id) {\n        return this._pack(authorization, 'burnasset', { asset_owner, asset_id });\n    }\n    async canceloffer(authorization, offer_id) {\n        return this._pack(authorization, 'canceloffer', { offer_id });\n    }\n    async createcol(authorization, author, collection_name, allow_notify, authorized_accounts, notify_accounts, market_fee, data) {\n        return this._pack(authorization, 'createcol', {\n            author,\n            collection_name,\n            allow_notify,\n            authorized_accounts,\n            notify_accounts,\n            market_fee,\n            data\n        });\n    }\n    async createoffer(authorization, sender, recipient, sender_asset_ids, recipient_asset_ids, memo) {\n        return this._pack(authorization, 'createoffer', { sender, recipient, sender_asset_ids, recipient_asset_ids, memo });\n    }\n    async createtempl(authorization, authorized_creator, collection_name, schema_name, transferable, burnable, max_supply, immutable_data) {\n        return this._pack(authorization, 'createtempl', {\n            authorized_creator, collection_name, schema_name, transferable, burnable, max_supply, immutable_data\n        });\n    }\n    async createschema(authorization, authorized_creator, collection_name, schema_name, schema_format) {\n        return this._pack(authorization, 'createschema', { authorized_creator, collection_name, schema_name, schema_format });\n    }\n    async declineoffer(authorization, offer_id) {\n        return this._pack(authorization, 'declineoffer', { offer_id });\n    }\n    async extendschema(authorization, authorized_editor, collection_name, schema_name, schema_format_extension) {\n        return this._pack(authorization, 'extendschema', { authorized_editor, collection_name, schema_name, schema_format_extension });\n    }\n    async forbidnotify(authorization, collection_name) {\n        return this._pack(authorization, 'forbidnotify', { collection_name });\n    }\n    async locktemplate(authorization, authorized_editor, collection_name, template_id) {\n        return this._pack(authorization, 'locktemplate', { authorized_editor, collection_name, template_id });\n    }\n    async mintasset(authorization, authorized_minter, collection_name, schema_name, template_id, new_asset_owner, immutable_data, mutable_data, tokens_to_back) {\n        return this._pack(authorization, 'mintasset', {\n            authorized_minter, collection_name, schema_name, template_id, new_asset_owner, immutable_data, mutable_data, tokens_to_back\n        });\n    }\n    async payofferram(authorization, payer, offer_id) {\n        return this._pack(authorization, 'payofferram', { payer, offer_id });\n    }\n    async remcolauth(authorization, collection_name, account_to_remove) {\n        return this._pack(authorization, 'remcolauth', { collection_name, account_to_remove });\n    }\n    async remnotifyacc(authorization, collection_name, account_to_remove) {\n        return this._pack(authorization, 'remnotifyacc', { collection_name, account_to_remove });\n    }\n    async setassetdata(authorization, authorized_editor, asset_owner, asset_id, new_mutable_data) {\n        return this._pack(authorization, 'setassetdata', { authorized_editor, asset_owner, asset_id, new_mutable_data });\n    }\n    async setcoldata(authorization, collection_name, data) {\n        return this._pack(authorization, 'setcoldata', { collection_name, data });\n    }\n    async setmarketfee(authorization, collection_name, market_fee) {\n        return this._pack(authorization, 'setmarketfee', { collection_name, market_fee });\n    }\n    async transfer(authorization, account_from, account_to, asset_ids, memo) {\n        return this._pack(authorization, 'transfer', { from: account_from, to: account_to, asset_ids, memo });\n    }\n    async withdraw(authorization, owner, token_to_withdraw) {\n        return this._pack(authorization, 'withdraw', { owner, token_to_withdraw });\n    }\n    _pack(authorization, name, data) {\n        return [{ account: this.contract, name, authorization, data }];\n    }\n}\nexports.ActionGenerator = ActionGenerator;\nfunction toAttributeMap(obj, schema) {\n    const types = {};\n    const result = [];\n    for (const row of schema) {\n        types[row.name] = row.type;\n    }\n    const keys = Object.keys(obj);\n    for (const key of keys) {\n        if (typeof types[key] !== 'undefined') {\n            throw new SerializationError_1.default('field not defined in schema');\n        }\n        result.push({ key, value: [types[key], obj[key]] });\n    }\n    return result;\n}\nexports.toAttributeMap = toAttributeMap;\n"]},"metadata":{},"sourceType":"script"}