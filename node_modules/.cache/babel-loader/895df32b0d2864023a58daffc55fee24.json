{"ast":null,"code":"!function (e, t) {\n  \"object\" == typeof exports && \"undefined\" != typeof module ? module.exports = t() : \"function\" == typeof define && define.amd ? define(t) : (e = \"undefined\" != typeof globalThis ? globalThis : e || self).PureCache = t();\n}(this, function () {\n  \"use strict\";\n\n  function e(e, t) {\n    var i = Object.keys(e);\n\n    if (Object.getOwnPropertySymbols) {\n      var r = Object.getOwnPropertySymbols(e);\n      t && (r = r.filter(function (t) {\n        return Object.getOwnPropertyDescriptor(e, t).enumerable;\n      })), i.push.apply(i, r);\n    }\n\n    return i;\n  }\n\n  function t(t) {\n    for (var i = 1; i < arguments.length; i++) {\n      var r = null != arguments[i] ? arguments[i] : {};\n      i % 2 ? e(Object(r), !0).forEach(function (e) {\n        o(t, e, r[e]);\n      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(r)) : e(Object(r)).forEach(function (e) {\n        Object.defineProperty(t, e, Object.getOwnPropertyDescriptor(r, e));\n      });\n    }\n\n    return t;\n  }\n\n  function i(e, t) {\n    if (!(e instanceof t)) throw new TypeError(\"Cannot call a class as a function\");\n  }\n\n  function r(e, t) {\n    for (var i = 0; i < t.length; i++) {\n      var r = t[i];\n      r.enumerable = r.enumerable || !1, r.configurable = !0, \"value\" in r && (r.writable = !0), Object.defineProperty(e, r.key, r);\n    }\n  }\n\n  function n(e, t, i) {\n    return t && r(e.prototype, t), i && r(e, i), e;\n  }\n\n  function o(e, t, i) {\n    return t in e ? Object.defineProperty(e, t, {\n      value: i,\n      enumerable: !0,\n      configurable: !0,\n      writable: !0\n    }) : e[t] = i, e;\n  }\n\n  function s(e) {\n    return {\n      all: e = e || new Map(),\n      on: function (t, i) {\n        var r = e.get(t);\n        r ? r.push(i) : e.set(t, [i]);\n      },\n      off: function (t, i) {\n        var r = e.get(t);\n        r && (i ? r.splice(r.indexOf(i) >>> 0, 1) : e.set(t, []));\n      },\n      emit: function (t, i) {\n        var r = e.get(t);\n        r && r.slice().map(function (e) {\n          e(i);\n        }), (r = e.get(\"*\")) && r.slice().map(function (e) {\n          e(t, i);\n        });\n      }\n    };\n  }\n\n  var a = \"expiry\",\n      u = \"add\",\n      c = \"get\",\n      h = \"remove\",\n      f = \"clear\",\n      l = function (e) {\n    if (e) throw new Error(\"Cannot use disposed instance.\");\n  },\n      d = {\n    expiryCheckInterval: 100\n  },\n      p = function () {\n    function e() {\n      var r = this,\n          n = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};\n      i(this, e), o(this, \"expire\", function () {\n        l(r.disposed);\n\n        for (var e = Date.now(), t = e; t >= r.lastExpiredTime; t -= 1) {\n          var i = r.queue[t];\n          i && (delete r.queue[t], i.forEach(function (e) {\n            var t = e.key;\n            return (0, e.onExpire)(t);\n          }));\n        }\n\n        r.lastExpiredTime = e;\n      }), this.config = t(t({}, d), n), this.queue = {}, this.disposed = !1, this.lastExpiredTime = Date.now() - 1;\n      var s = this.config.expiryCheckInterval;\n      this.timer = setInterval(this.expire, s);\n    }\n\n    return n(e, [{\n      key: \"add\",\n      value: function (e, t, i) {\n        return l(this.disposed), this.queue[e] || (this.queue[e] = []), this.queue[e].push({\n          key: t,\n          onExpire: i\n        }), !0;\n      }\n    }, {\n      key: \"remove\",\n      value: function (e, t) {\n        l(this.disposed);\n        var i = this.queue[e];\n\n        if (i) {\n          var r = i.filter(function (e) {\n            return e.key !== t;\n          });\n          return r.length ? this.queue[e] = r : delete this.queue[e], !0;\n        }\n\n        return !1;\n      }\n    }, {\n      key: \"dispose\",\n      value: function () {\n        return l(this.disposed), clearInterval(this.timer), this.timer = null, this.queue = {}, this.disposed = !0, !0;\n      }\n    }]), e;\n  }(),\n      v = {\n    defaultCacheExpiryIn: 6e4,\n    expiryCheckInterval: 100\n  };\n\n  return function () {\n    function e() {\n      var r = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},\n          n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : p;\n      i(this, e), this.config = t(t({}, v), r);\n      var o = s(),\n          a = o.on,\n          u = o.off,\n          c = o.emit,\n          h = [a, u, c];\n      this.on = h[0], this.off = h[1], this.emit = h[2], this.cacheStore = {}, this.disposed = !1;\n      var f = this.config.expiryCheckInterval;\n      this.cacheExpirer = new n({\n        expiryCheckInterval: f\n      });\n    }\n\n    return n(e, [{\n      key: \"put\",\n      value: function () {\n        var e = this,\n            t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : \"\",\n            i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : \"\",\n            r = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : this.config.defaultCacheExpiryIn;\n        l(this.disposed), this.cacheStore[t] && this.remove(t);\n        var n = Date.now(),\n            o = r ? n + r : null,\n            s = {\n          value: i,\n          addedAt: n,\n          expiryAt: o\n        };\n\n        if (this.cacheStore[t] = s, o) {\n          var c = function () {\n            e.remove(t), e.emit(a, {\n              key: t,\n              data: e.cacheStore[t]\n            });\n          };\n\n          this.cacheExpirer.add(o, t, c);\n        }\n\n        return this.emit(u, {\n          key: t,\n          data: s\n        }), s;\n      }\n    }, {\n      key: \"get\",\n      value: function () {\n        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : \"\";\n        l(this.disposed);\n        var t = this.cacheStore[e];\n        return t ? (this.emit(c, {\n          key: e,\n          data: t\n        }), t) : null;\n      }\n    }, {\n      key: \"remove\",\n      value: function (e) {\n        l(this.disposed);\n        var t = this.cacheStore[e];\n\n        if (t) {\n          delete this.cacheStore[e];\n          var i = t.expiryAt;\n          return this.cacheExpirer.remove(i, e), this.emit(h, {\n            key: e,\n            data: t\n          }), !0;\n        }\n\n        return !1;\n      }\n    }, {\n      key: \"dispose\",\n      value: function () {\n        var e = this;\n        return l(this.disposed), Object.keys(this.cacheStore).forEach(function (t) {\n          return e.remove(t);\n        }), this.emit(f, {}), this.cacheExpirer.dispose(), this.disposed = !0, !0;\n      }\n    }]), e;\n  }();\n});","map":{"version":3,"sources":["../node_modules/mitt/dist/mitt.mjs","../src/constants/events.js","../src/utils/checkInstanceDisposal.js","../src/constants/inMemoryDefaultConfig.js","../src/inMemoryExpirer.js","../src/constants/pureCacheDefaultConfig.js","../src/pureCache.js"],"names":["n","all","Map","on","t","e","i","get","push","set","off","splice","indexOf","emit","slice","map","checkIfInstanceIsDisposed","instanceDisposed","Error","inMemoryDefaultConfig","expiryCheckInterval","InMemoryExpirer","config","defaultConfig","queue","disposed","lastExpiredTime","Date","now","this","timer","setInterval","expire","_this","time","toExpire","forEach","key","onExpire","filteredQueue","filter","length","clearInterval","pureCacheDefaultConfig","defaultCacheExpiryIn","Expirer","mitt","cacheStore","cacheExpirer","value","expiryIn","remove","addedAt","expiryAt","target","Events","data","add","Object","keys","_this2","dispose"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAe;;AAAA,WAAA,CAAA,CAASA,CAAT,EAASA;AAAG,WAAM;AAACC,MAAAA,GAAAA,EAAID,CAAAA,GAAEA,CAAAA,IAAG,IAAIE,GAAJ,EAAV;AAAkBC,MAAAA,EAAAA,EAAG,UAASC,CAAT,EAAWC,CAAX,EAAWA;AAAG,YAAIC,CAAAA,GAAEN,CAAAA,CAAEO,GAAFP,CAAMI,CAANJ,CAAN;AAAeM,QAAAA,CAAAA,GAAEA,CAAAA,CAAEE,IAAFF,CAAOD,CAAPC,CAAFA,GAAYN,CAAAA,CAAES,GAAFT,CAAMI,CAANJ,EAAQ,CAACK,CAAD,CAARL,CAAZM;AAAqBD,OAAvE;AAA4EK,MAAAA,GAAAA,EAAI,UAASN,CAAT,EAAWC,CAAX,EAAWA;AAAG,YAAIC,CAAAA,GAAEN,CAAAA,CAAEO,GAAFP,CAAMI,CAANJ,CAAN;AAAeM,QAAAA,CAAAA,KAAID,CAAAA,GAAEC,CAAAA,CAAEK,MAAFL,CAASA,CAAAA,CAAEM,OAAFN,CAAUD,CAAVC,MAAe,CAAxBA,EAA0B,CAA1BA,CAAFD,GAA+BL,CAAAA,CAAES,GAAFT,CAAMI,CAANJ,EAAQ,EAARA,CAAnCM,CAAAA;AAA2C,OAAxJ;AAA8JO,MAAAA,IAAAA,EAAK,UAAST,CAAT,EAAWC,CAAX,EAAWA;AAAG,YAAIC,CAAAA,GAAEN,CAAAA,CAAEO,GAAFP,CAAMI,CAANJ,CAAN;AAAeM,QAAAA,CAAAA,IAAGA,CAAAA,CAAEQ,KAAFR,GAAUS,GAAVT,CAAc,UAASN,CAAT,EAASA;AAAGA,UAAAA,CAAAA,CAAEK,CAAFL,CAAAA;AAAEK,SAA5BC,CAAHA,EAA+BD,CAAMC,CAAAA,GAAEN,CAAAA,CAAEO,GAAFP,CAAM,GAANA,CAARK,KAAqBC,CAAAA,CAAEQ,KAAFR,GAAUS,GAAVT,CAAc,UAASN,CAAT,EAASA;AAAGA,UAAAA,CAAAA,CAAEI,CAAFJ,EAAIK,CAAJL,CAAAA;AAAIK,SAA9BC,CAApDA;AAAkFD;AAAlR,KAAN;AAAwRA;;AAAAA,MAAAA,CAAAA,GCIzS,QDJySA;AAAAA,MCIzS,CAAA,GACH,KDL4SA;AAAAA,MCK5S,CAAA,GACA,KDN4SA;AAAAA,MCM5S,CAAA,GACG,QDPySA;AAAAA,MCOzS,CAAA,GACD,ODR0SA;AAAAA,MEA7SW,CAAAA,GAA4B,UAAA,CAAA,EAAA;AAAA,QAC5BC,CAD4B,EAC5BA,MACI,IAAIC,KAAJ,CAAU,+BAAV,CADJD;AACc,GFF+RZ;AAAAA,MGG7Sc,CAAAA,GAAwB;AAG5BC,IAAAA,mBAAAA,EAAqB;AAHO,GHHqRf;AAAAA,MIY7SgB,CAAAA,GAAAA,YAAAA;AAAAA,aAAAA,CAAAA,GAAAA;AAAAA,UAAAA,CAAAA,GAAAA,IAAAA;AAAAA,UACQC,CAAAA,GAAAA,SAAAA,CAAAA,MAAAA,GAAAA,CAAAA,IAAAA,KAAAA,CAAAA,KAAAA,SAAAA,CAAAA,CAAAA,CAAAA,GAAAA,SAAAA,CAAAA,CAAAA,CAAAA,GAAS,EADjBD;AACiB,MAAA,CAAA,CAAA,IAAA,EAAA,CAAA,CAAA,EAAA,CAAA,CAAA,IAAA,EAAA,QAAA,EAuBZ,YAAA;AACPL,QAAAA,CAAAA,CAA0BiB,CAAAA,CAAKR,QAA/BT,CAAAA;;AAA+BS,aAAAA,IAEzBS,CAAAA,GAAOP,IAAAA,CAAKC,GAALD,EAFkBF,EAItBrB,CAAAA,GAAI8B,CAJkBT,EAIZrB,CAAAA,IAAK6B,CAAAA,CAAKP,eAJED,EAIerB,CAAAA,IAAK,CAJpBqB,EAIuB;AAAA,cAC9CU,CAAAA,GAAWF,CAAAA,CAAKT,KAALS,CAAW7B,CAAX6B,CADmC;AAGhDE,UAAAA,CAAAA,KAAAA,OACKF,CAAAA,CAAKT,KAALS,CAAW7B,CAAX6B,CADLE,EAEFA,CAAAA,CAASC,OAATD,CAAiB,UAAA,CAAA,EAAA;AAAA,gBAAGE,CAAAA,GAAAA,CAAAA,CAAAA,GAAH;AAAGA,mBAAAA,CAAoBC,GAAAA,CAAAA,CAAfA,QAALD,EAA6BA,CAA7BA,CAAAA;AAA6BA,WAAjDF,CAFEA,CAAAA;AAMNF;;AAAAA,QAAAA,CAAAA,CAAKP,eAALO,GAAuBC,CAAvBD;AAAuBC,OArCJ,CAAA,EAqCIA,KAnClBZ,MAmCkBY,GAnClBZ,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA,EAAcC,CAAdD,CAAAA,EAAgCA,CAAhCA,CAFc,EAEkBA,KAGhCE,KAHgCF,GAGxB,EALM,EAKN,KAGRG,QAHQ,GAGRA,CAAW,CARG,EAQH,KAKXC,eALW,GAKOC,IAAAA,CAAKC,GAALD,KAAa,CAbjB;AAaiB,UAG5BP,CAAAA,GAAwBS,KAAKP,MAALO,CAAxBT,mBAH4B;AAG5BA,WACHU,KADGV,GACKW,WAAAA,CAAYF,KAAKG,MAAjBD,EAAyBX,CAAzBW,CADLX;AAC8BA;;AAAAA,WAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA;AAAAA,MAAAA,GAAAA,EAAAA,KAAAA;AAAAA,MAAAA,KAAAA,EAAAA,UA8BpCc,CA9BoCd,EA8B9BiB,CA9B8BjB,EA8BzBkB,CA9ByBlB,EA8BzBkB;AAAAA,eACbtB,CAAAA,CAA0Ba,KAAKJ,QAA/BT,CAAAA,EAEKa,KAAKL,KAALK,CAAWK,CAAXL,MAAWK,KACTV,KADSU,CACHA,CADGA,IACK,EADhBL,CAFLb,EAGqB,KAGhBQ,KAHgB,CAGVU,CAHU,EAGJ1B,IAHI,CAGC;AAAE6B,UAAAA,GAAAA,EAAAA,CAAF;AAAOC,UAAAA,QAAAA,EAAAA;AAAP,SAHD,CAHrBtB,EAM6BsB,CAEtB,CATMA;AASN;AAvC+BlB,KAAAA,EAuC/B;AAAA,MAAA,GAAA,EAAA,QAAA;AAAA,MAAA,KAAA,EAST,UAAOc,CAAP,EAAaG,CAAb,EAAaA;AACXrB,QAAAA,CAAAA,CAA0Ba,KAAKJ,QAA/BT,CAAAA;AAA+BS,YAEzBD,CAAAA,GAAQK,KAAKL,KAALK,CAAWK,CAAXL,CAFiBJ;;AAENS,YAErBV,CAFqBU,EAEd;AAAA,cAEHK,CAAAA,GAAgBf,CAAAA,CAAMgB,MAANhB,CAAa,UAAA,CAAA,EAAA;AAAA,mBAAA,CAAA,CAAGa,GAAH,KAAsBA,CAAtB;AAAsBA,WAAnCb,CAFb;AAEgDa,iBACpDE,CAAAA,CAAcE,MAAdF,GAAcE,KAGZjB,KAHYiB,CAGNP,CAHMO,IAGEF,CAHhBA,GAGgBA,OAFZV,KAAKL,KAALK,CAAWK,CAAXL,CADJU,EACeL,CAKb,CAPkDG;AAOlD;;AAAA,eAAA,CAGF,CAHE;AAGF;AA1BA,KAvC+BjB,EAiE/B;AAAA,MAAA,GAAA,EAAA,SAAA;AAAA,MAAA,KAAA,EAMT,YAAA;AAAA,eACEJ,CAAAA,CAA0Ba,KAAKJ,QAA/BT,CAAAA,EAEA0B,aAAAA,CAAcb,KAAKC,KAAnBY,CAFA1B,EAEmBc,KACdA,KADcA,GACN,IAHbd,EAGa,KACRQ,KADQ,GACA,EAJbR,EAIa,KACRS,QADQ,GACRA,CAAW,CALhBT,EAKgB,CAET,CART;AAQS;AAdA,KAjE+BI,CAAAA,CAAAA,EA+E/B,CA/E+BA;AA+E/B,GAjGLC,EJZ6ShB;AAAAA,MKG7SsC,CAAAA,GAAyB;AAI7BC,IAAAA,oBAAAA,EAAsB,GAJO;AAO7BxB,IAAAA,mBAAAA,EAAqB;AAPQ,GLHoRf;;AKU5R,SAAA,YAAA;AAAA,aAAA,CAAA,GAAA;AAAA,UCOTiB,CAAAA,GAAAA,SAAAA,CAAAA,MAAAA,GAAAA,CAAAA,IAAAA,KAAAA,CAAAA,KAAAA,SAAAA,CAAAA,CAAAA,CAAAA,GAAAA,SAAAA,CAAAA,CAAAA,CAAAA,GAAS,EDPA;AAAA,UCOIuB,CAAAA,GAAAA,SAAAA,CAAAA,MAAAA,GAAAA,CAAAA,IAAAA,KAAAA,CAAAA,KAAAA,SAAAA,CAAAA,CAAAA,CAAAA,GAAAA,SAAAA,CAAAA,CAAAA,CAAAA,GAAUxB,CDPd;ACOcA,MAAAA,CAAAA,CAAAA,IAAAA,EAAAA,CAAAA,CAAAA,EAAAA,KAE5BC,MAF4BD,GAE5BC,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA,EAAcC,CAAdD,CAAAA,EAAgCA,CAAhCA,CAF4BD;AAEIC,UAAAA,CAAAA,GAGXwB,CAAAA,EAHWxB;AAAAA,UAG7BnB,CAAAA,GAAAA,CAAAA,CAAAA,EAH6BmB;AAAAA,UAGzBZ,CAAAA,GAAAA,CAAAA,CAAAA,GAHyBY;AAAAA,UAGpBT,CAAAA,GAAAA,CAAAA,CAAAA,IAHoBS;AAAAA,UAGpBT,CAAAA,GACgB,CAACV,CAAD,EAAKO,CAAL,EAAUG,CAAV,CAJIS;AAIMT,WAArCV,EAAqCU,GAArCV,CAAAA,CAAAA,CAAAA,CAAqCU,EAArCV,KAASO,GAATP,GAASO,CAAAA,CAAAA,CAAAA,CAA4BG,EAA5BH,KAAUG,IAAVH,GAAUG,CAAAA,CAAAA,CAAAA,CAAkBA,EAAlBA,KAGpBkC,UAHoBlC,GAGP,EAHyBA,EAGzB,KAGbY,QAHa,GAGbA,CAAW,CAN2BZ;AAM3B,UAGRO,CAAAA,GAAwBS,KAAKP,MAALO,CAAxBT,mBAHQ;AAGRA,WACH4B,YADG5B,GACY,IAAIyB,CAAJ,CAAY;AAAEzB,QAAAA,mBAAAA,EAAAA;AAAF,OAAZ,CADZA;AAC0BA;;AAAAA,WAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA;AAAAA,MAAAA,GAAAA,EAAAA,KAAAA;AAAAA,MAAAA,KAAAA,EAcpC,YAAA;AAAA,YAAA,CAAA,GAAA,IAAA;AAAA,YAAIiB,CAAAA,GAAAA,SAAAA,CAAAA,MAAAA,GAAAA,CAAAA,IAAAA,KAAAA,CAAAA,KAAAA,SAAAA,CAAAA,CAAAA,CAAAA,GAAAA,SAAAA,CAAAA,CAAAA,CAAAA,GAAM,EAAV;AAAA,YAAcY,CAAAA,GAAAA,SAAAA,CAAAA,MAAAA,GAAAA,CAAAA,IAAAA,KAAAA,CAAAA,KAAAA,SAAAA,CAAAA,CAAAA,CAAAA,GAAAA,SAAAA,CAAAA,CAAAA,CAAAA,GAAQ,EAAtB;AAAA,YAA0BC,CAAAA,GAAAA,SAAAA,CAAAA,MAAAA,GAAAA,CAAAA,IAAAA,KAAAA,CAAAA,KAAAA,SAAAA,CAAAA,CAAAA,CAAAA,GAAAA,SAAAA,CAAAA,CAAAA,CAAAA,GAAWrB,KAAKP,MAALO,CAAYe,oBAAjD;AACE5B,QAAAA,CAAAA,CAA0Ba,KAAKJ,QAA/BT,CAAAA,EAGIa,KAAKkB,UAALlB,CAAgBQ,CAAhBR,KAAgBQ,KACbc,MADad,CACNA,CADMA,CAHpBrB;AAIcqB,YAGRe,CAAAA,GAAUzB,IAAAA,CAAKC,GAALD,EAHFU;AAAAA,YAMRgB,CAAAA,GAAWH,CAAAA,GAAWE,CAAAA,GAAUF,CAArBA,GAAgC,IANnCb;AAAAA,YAORiB,CAAAA,GAAS;AAAEL,UAAAA,KAAAA,EAAAA,CAAF;AAASG,UAAAA,OAAAA,EAAAA,CAAT;AAAkBC,UAAAA,QAAAA,EAAAA;AAAlB,SAPDhB;;AAOmBgB,YAAAA,KAC5BN,UAD4BM,CACjBhB,CADiBgB,IACVC,CADUD,EAI7BA,CAJ6BA,EAInB;AAAA,cAENf,CAAAA,GAAW,YAAA;AACfL,YAAAA,CAAAA,CAAKkB,MAALlB,CAAYI,CAAZJ,GACAA,CAAAA,CAAKpB,IAALoB,CAAUsB,CAAVtB,EAAyB;AACvBI,cAAAA,GAAAA,EAAAA,CADuB;AAEvBmB,cAAAA,IAAAA,EAAMvB,CAAAA,CAAKc,UAALd,CAAgBI,CAAhBJ;AAFiB,aAAzBA,CADAA;AAGwBI,WANd;;AAMcA,eAIrBW,YAJqBX,CAIRoB,GAJQpB,CAIJgB,CAJIhB,EAIMA,CAJNA,EAIWC,CAJXD;AAIWC;;AAAAA,eAAAA,KAElCzB,IAFkCyB,CAE7BiB,CAF6BjB,EAEjB;AAAED,UAAAA,GAAAA,EAAAA,CAAF;AAAOmB,UAAAA,IAAAA,EAAMF;AAAb,SAFiBhB,GAIhCgB,CAJgChB;AAIhCgB;AA5C2BlC,KAAAA,EA4C3BkC;AAAAA,MAAAA,GAAAA,EAAAA,KAAAA;AAAAA,MAAAA,KAAAA,EAWT,YAAA;AAAA,YAAIjB,CAAAA,GAAAA,SAAAA,CAAAA,MAAAA,GAAAA,CAAAA,IAAAA,KAAAA,CAAAA,KAAAA,SAAAA,CAAAA,CAAAA,CAAAA,GAAAA,SAAAA,CAAAA,CAAAA,CAAAA,GAAM,EAAV;AACErB,QAAAA,CAAAA,CAA0Ba,KAAKJ,QAA/BT,CAAAA;AAA+BS,YAEzB6B,CAAAA,GAASzB,KAAKkB,UAALlB,CAAgBQ,CAAhBR,CAFgBJ;AAEAY,eAE3BiB,CAAAA,IAAAA,KACGzC,IADHyC,CACQC,CADRD,EACoB;AAAEjB,UAAAA,GAAAA,EAAAA,CAAF;AAAOmB,UAAAA,IAAAA,EAAMF;AAAb,SADpBA,GAEKA,CAFLA,IAKG,IAPwBjB;AAOxB;AArBAiB,KA5C2BlC,EAiE3B;AAAA,MAAA,GAAA,EAAA,QAAA;AAAA,MAAA,KAAA,EAUT,UAAOiB,CAAP,EAAOA;AACLrB,QAAAA,CAAAA,CAA0Ba,KAAKJ,QAA/BT,CAAAA;AAA+BS,YAEzB6B,CAAAA,GAASzB,KAAKkB,UAALlB,CAAgBQ,CAAhBR,CAFgBJ;;AAEAY,YAE3BiB,CAF2BjB,EAEnB;AAAA,iBAEHR,KAAKkB,UAALlB,CAAgBQ,CAAhBR,CAFG;AAEaQ,cACfgB,CAAAA,GAAaC,CAAAA,CAAbD,QADehB;AACfgB,iBAAAA,KAEHL,YAFGK,CAEUF,MAFVE,CAEiBA,CAFjBA,EAE2BhB,CAF3BgB,GAE2BhB,KAC9BxB,IAD8BwB,CACzBkB,CADyBlB,EACV;AAAEA,YAAAA,GAAAA,EAAAA,CAAF;AAAOmB,YAAAA,IAAAA,EAAMF;AAAb,WADUjB,CAF3BgB,EAG8BC,CAE/B,CALCD;AAKD;;AAAA,eAAA,CAGF,CAHE;AAGF;AA1BA,KAjE2BjC,EA2F3B;AAAA,MAAA,GAAA,EAAA,SAAA;AAAA,MAAA,KAAA,EAQT,YAAA;AAAA,YAAA,CAAA,GAAA,IAAA;AAAA,eACEJ,CAAAA,CAA0Ba,KAAKJ,QAA/BT,CAAAA,EAEA0C,MAAAA,CAAOC,IAAPD,CAAY7B,KAAKkB,UAAjBW,EAA6BtB,OAA7BsB,CAAqC,UAAA,CAAA,EAAA;AAAA,iBAAOE,CAAAA,CAAKT,MAALS,CAAYvB,CAAZuB,CAAP;AAAmBvB,SAAxDqB,CAFA1C,EAEwDqB,KACnDxB,IADmDwB,CAC9CkB,CAD8ClB,EAChC,EADgCA,CAFxDrB,EAGwB,KACnBgC,YADmB,CACNa,OADM,EAHxB7C,EAIkB6C,KACbpC,QADaoC,GACbpC,CAAW,CALhBT,EAKgB,CAET,CART;AAQS;AAhBA,KA3F2BI,CAAAA,CAAAA,EA2G3B,CA3G2BA;AA2G3B,GDlIY,EAAA;ACkIZ,C","sourcesContent":["export default function(n){return{all:n=n||new Map,on:function(t,e){var i=n.get(t);i?i.push(e):n.set(t,[e])},off:function(t,e){var i=n.get(t);i&&(e?i.splice(i.indexOf(e)>>>0,1):n.set(t,[]))},emit:function(t,e){var i=n.get(t);i&&i.slice().map(function(n){n(e)}),(i=n.get(\"*\"))&&i.slice().map(function(n){n(t,e)})}}}\n//# sourceMappingURL=mitt.mjs.map\n","/**\n * Events list\n */\nexport default {\n  EXPIRY: \"expiry\",\n  ADD: \"add\",\n  GET: \"get\",\n  REMOVE: \"remove\",\n  CLEAR: \"clear\"\n};\n","const checkIfInstanceIsDisposed = instanceDisposed => {\n  if (instanceDisposed) {\n    throw new Error(\"Cannot use disposed instance.\");\n  }\n};\n\nexport default checkIfInstanceIsDisposed;\n","/**\n * In memory default config\n * */\nconst inMemoryDefaultConfig = {\n  // By default, check for cache expiry every 100 ms\n  // Reducing this value might create performance issues\n  expiryCheckInterval: 100\n};\n\nexport default inMemoryDefaultConfig;\n","import checkIfInstanceIsDisposed from \"./utils/checkInstanceDisposal\";\nimport defaultConfig from \"./constants/inMemoryDefaultConfig\";\n\n/**\n * Near realtime expiry handler\n *\n * queue Structure:\n *  {\n *    time1: [{key: key1, onExpire: () => {}}, {key: key2, onExpire: () => {}}],\n *    time2: [{key: key3, onExpire: () => {}}]\n *  }\n */\nclass InMemoryExpirer {\n  constructor(config = {}) {\n    // Configuration\n    this.config = { ...defaultConfig, ...config };\n\n    // Expirer queue\n    this.queue = {};\n\n    // Instance dispose status\n    this.disposed = false;\n\n    // Store last expired time to navigate from current expired time to last expired time\n    // Set initial value to current time - 1\n    // Don't set to 0 as expiry function will loop from current time to 0\n    this.lastExpiredTime = Date.now() - 1;\n\n    // Run the expiry function at every configured interval time\n    const { expiryCheckInterval } = this.config;\n    this.timer = setInterval(this.expire, expiryCheckInterval);\n  }\n\n  /**\n   * Expiry function\n   * */\n  expire = () => {\n    checkIfInstanceIsDisposed(this.disposed);\n\n    const time = Date.now();\n\n    for (let t = time; t >= this.lastExpiredTime; t -= 1) {\n      const toExpire = this.queue[t];\n\n      if (toExpire) {\n        delete this.queue[t];\n        toExpire.forEach(({ key, onExpire }) => onExpire(key));\n      }\n    }\n\n    this.lastExpiredTime = time;\n  };\n\n  /**\n   * Add to expiry queue\n   *\n   * @param {Number} time  When to expire\n   * @param {String} key key to store expiry data against\n   * @param {Function} onExpire Expiry callback, called when Date.now() ~= time\n   * */\n  add(time, key, onExpire) {\n    checkIfInstanceIsDisposed(this.disposed);\n\n    if (!this.queue[time]) {\n      this.queue[time] = [];\n    }\n\n    this.queue[time].push({ key, onExpire });\n\n    return true;\n  }\n\n  /**\n   * Remove specific key from expiry queue\n   *\n   * @param {Number} time  Expiry time\n   * @param {String} key key to remove from the expiry queue\n   * */\n  remove(time, key) {\n    checkIfInstanceIsDisposed(this.disposed);\n\n    const queue = this.queue[time];\n\n    if (queue) {\n      // Filter out keys in queue[time] which are matching current remove key\n      const filteredQueue = queue.filter(({ key: k }) => k !== key);\n      if (!filteredQueue.length) {\n        delete this.queue[time];\n      } else {\n        this.queue[time] = filteredQueue;\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Cleanup - Empty queue & clear expirer timer\n   * */\n  dispose() {\n    checkIfInstanceIsDisposed(this.disposed);\n\n    clearInterval(this.timer);\n    this.timer = null;\n    this.queue = {};\n    this.disposed = true;\n\n    return true;\n  }\n}\n\nexport default InMemoryExpirer;\n","/**\n * Pure cache default config\n * */\nconst pureCacheDefaultConfig = {\n  // Default cache expiry time, 60000ms(60s) by default\n  // Set `false` to disable expiry(This beats the purpose of cache, the data is store until the instance is disposed)\n  // Note: Falsy values like `0` will be treated as `false`\n  defaultCacheExpiryIn: 60000,\n  // By default, check for cache expiry every 100 ms\n  // Reducing this value might create performance issues\n  expiryCheckInterval: 100\n};\n\nexport default pureCacheDefaultConfig;\n","import mitt from \"mitt\";\nimport Events from \"./constants/events\";\nimport InMemoryExpirer from \"./inMemoryExpirer\";\nimport checkIfInstanceIsDisposed from \"./utils/checkInstanceDisposal\";\nimport defaultConfig from \"./constants/pureCacheDefaultConfig\";\n\n/**\n * pure-cache: Cache with confidence 🎉 Ultra fast in-memory JavaScript cache with near realtime cache expiry feature ⚡\n *\n * cacheStore Structure:\n *    {\n *      key1: { value: value1, addedAt: 1527012874728, expiryAt: 1527012879729 },\n *      key2: { value: value2, addedAt: 1527012908893, expiryAt: 1527012909880 },\n *      ...\n *    }\n */\nclass PureCache {\n  constructor(config = {}, Expirer = InMemoryExpirer) {\n    // Configuration\n    this.config = { ...defaultConfig, ...config };\n\n    // Event listeners\n    const { on, off, emit } = mitt();\n    [this.on, this.off, this.emit] = [on, off, emit];\n\n    // Cache store\n    this.cacheStore = {};\n\n    // Instance dispose status\n    this.disposed = false;\n\n    // Create cache expirer instance, which maintains its own expiry queue\n    const { expiryCheckInterval } = this.config;\n    this.cacheExpirer = new Expirer({ expiryCheckInterval });\n  }\n\n  /**\n   * Put data into the cache\n   *\n   * @param {String} key  Cache key\n   * @param {String|Object|*} value Value to be stored against cache key\n   * @param {Number} expiryIn Expiry time(in ms from now), defaults to `60000ms(60s)`,\n   *                          if set to falsy values(like `0` & `false`), cache will\n   *                          act as simple in-memory data store and data is never expired for the key\n   *\n   * @returns {Object} Newly added Object({ value, addedAt, expiryAt }) with `value` key consists of actual data\n   * */\n  put(key = \"\", value = \"\", expiryIn = this.config.defaultCacheExpiryIn) {\n    checkIfInstanceIsDisposed(this.disposed);\n\n    // Remove existing values in the key(if any)\n    if (this.cacheStore[key]) {\n      this.remove(key);\n    }\n\n    const addedAt = Date.now();\n    // Ignore all falsy values(like `0` & `false`)\n    // Basically if there is no expiry, cache will act as simple in-memory data store\n    const expiryAt = expiryIn ? addedAt + expiryIn : null;\n    const target = { value, addedAt, expiryAt };\n    this.cacheStore[key] = target;\n\n    // If expiry time exists, add to expiry queue\n    if (expiryAt) {\n      // Remove value from cache and trigger expiry event\n      const onExpire = () => {\n        this.remove(key);\n        this.emit(Events.EXPIRY, {\n          key,\n          data: this.cacheStore[key]\n        });\n      };\n\n      this.cacheExpirer.add(expiryAt, key, onExpire);\n    }\n    this.emit(Events.ADD, { key, data: target });\n\n    return target;\n  }\n\n  /**\n   * Get data from the cache\n   *\n   * @param {String} key  Cache key\n   *\n   * @returns {Object|null} If `key` found, returns Object({ value, addedAt, expiryAt })\n   *                        with `value` key consists of actual data, else returns `null`\n   * */\n  get(key = \"\") {\n    checkIfInstanceIsDisposed(this.disposed);\n\n    const target = this.cacheStore[key];\n\n    if (target) {\n      this.emit(Events.GET, { key, data: target });\n      return target;\n    }\n\n    return null;\n  }\n\n  /**\n   * Remove data from the cache\n   *\n   * @param {String} key  Cache key to be removed from the cache\n   *\n   * @returns {Boolean} If `key` found, returns `true`,else returns `false`\n   * */\n  remove(key) {\n    checkIfInstanceIsDisposed(this.disposed);\n\n    const target = this.cacheStore[key];\n\n    if (target) {\n      // Remove key & value from cache\n      delete this.cacheStore[key];\n      const { expiryAt } = target;\n      // If timer exists for the key, remove it\n      this.cacheExpirer.remove(expiryAt, key);\n      this.emit(Events.REMOVE, { key, data: target });\n\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Cleanup - Clear entire cache & stop expirer\n   *\n   * @returns {Boolean} Returns `true`\n   * */\n  dispose() {\n    checkIfInstanceIsDisposed(this.disposed);\n\n    Object.keys(this.cacheStore).forEach(key => this.remove(key));\n    this.emit(Events.CLEAR, {});\n    this.cacheExpirer.dispose();\n    this.disposed = true;\n\n    return true;\n  }\n}\n\nexport default PureCache;\n"]},"metadata":{},"sourceType":"script"}