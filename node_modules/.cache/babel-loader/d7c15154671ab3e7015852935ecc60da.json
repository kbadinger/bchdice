{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst universal_authenticator_library_1 = require(\"universal-authenticator-library\");\n\nconst dist_1 = require(\"universal-authenticator-library/dist\");\n\nconst dist_2 = require(\"@waxio/waxjs/dist\");\n\nconst WaxUser_1 = require(\"./WaxUser\");\n\nconst WaxIcon_1 = require(\"./WaxIcon\");\n\nconst UALWaxError_1 = require(\"./UALWaxError\");\n\nclass Wax extends universal_authenticator_library_1.Authenticator {\n  constructor(chains, options) {\n    super(chains, options);\n    this.users = [];\n    this.initiated = false;\n    this.apiSigner = options && options.apiSigner;\n    this.waxSigningURL = options && options.waxSigningURL;\n    this.waxAutoSigningURL = options && options.waxAutoSigningURL;\n  }\n  /**\n   * Called after `shouldRender` and should be used to handle any async actions required to initialize the authenticator\n   */\n\n\n  async init() {\n    this.initWaxJS();\n\n    try {\n      if (this.wax) {\n        if (await this.wax.isAutoLoginAvailable()) {\n          this.receiveLogin();\n        } else {\n          const data = JSON.parse(localStorage.getItem('ual-wax:autologin') || 'null');\n\n          if (data && data.expire >= Date.now()) {\n            this.receiveLogin(data.userAccount, data.pubKeys);\n          }\n        }\n      }\n    } catch (e) {\n      console.log('UAL-WAX: autologin error', e);\n    }\n\n    this.initiated = true;\n    console.log(`UAL-WAX: init`);\n  }\n  /**\n   * Resets the authenticator to its initial, default state then calls `init` method\n   */\n\n\n  reset() {\n    this.wax = undefined;\n    this.users = [];\n    this.initiated = false;\n    this.session = undefined;\n  }\n  /**\n   * Returns true if the authenticator has errored while initializing.\n   */\n\n\n  isErrored() {\n    return false;\n  }\n  /**\n   * Returns a URL where the user can download and install the underlying authenticator\n   * if it is not found by the UAL Authenticator.\n   */\n\n\n  getOnboardingLink() {\n    return 'https://all-access.wax.io/';\n  }\n  /**\n   * Returns error (if available) if the authenticator has errored while initializing.\n   */\n\n\n  getError() {\n    return null;\n  }\n  /**\n   * Returns true if the authenticator is loading while initializing its internal state.\n   */\n\n\n  isLoading() {\n    return !this.initiated;\n  }\n  /**\n   * Returns the style of the Button that will be rendered.\n   */\n\n\n  getStyle() {\n    return {\n      icon: WaxIcon_1.WaxIcon,\n      text: 'WAX Cloud Wallet',\n      textColor: 'white',\n      background: '#111111'\n    };\n  }\n  /**\n   * Returns whether or not the button should render based on the operating environment and other factors.\n   * ie. If your Authenticator App does not support mobile, it returns false when running in a mobile browser.\n   */\n\n\n  shouldRender() {\n    return true;\n  }\n  /**\n   * Returns whether or not the dapp should attempt to auto login with the Authenticator app.\n   * Auto login will only occur when there is only one Authenticator that returns shouldRender() true and\n   * shouldAutoLogin() true.\n   */\n\n\n  shouldAutoLogin() {\n    return false;\n  }\n  /**\n   * Returns whether or not the button should show an account name input field.\n   * This is for Authenticators that do not have a concept of account names.\n   */\n\n\n  async shouldRequestAccountName() {\n    return false;\n  }\n  /**\n   * Returns the amount of seconds after the authentication will be invalid for logging in on new\n   * browser sessions.  Setting this value to zero will cause users to re-attempt authentication on\n   * every new browser session.  Please note that the invalidate time will be saved client-side and\n   * should not be relied on for security.\n   */\n\n\n  shouldInvalidateAfter() {\n    return 86400;\n  }\n  /**\n   * Login using the Authenticator App. This can return one or more users depending on multiple chain support.\n   */\n\n\n  async login() {\n    console.log(`UAL-WAX: login requested`); // Commented for now to support multiple wax chains such as testnets/staging in the future\n    // Mainnet check:  this.chains[0].chainId !== '1064487b3cd1a897ce03ae5b6a865651747e2e152090f99c1d19d44e01aea5a4'\n\n    if (this.chains.length > 1) {\n      throw new UALWaxError_1.UALWaxError('WAX Could Wallet only supports one WAX chain', dist_1.UALErrorType.Unsupported, null);\n    }\n\n    if (!this.wax) {\n      throw new UALWaxError_1.UALWaxError('WAX Cloud Wallet not initialized yet', dist_1.UALErrorType.Initialization, null);\n    }\n\n    try {\n      if (!this.session) {\n        await this.wax.login();\n        this.receiveLogin();\n      }\n\n      if (!this.session) {\n        throw new Error('Could not receive login information');\n      }\n\n      this.users = [new WaxUser_1.WaxUser(this.chains[0], this.session.userAccount, this.session.pubKeys, this.wax)];\n      console.log(`UAL-WAX: login`, this.users);\n      return this.users;\n    } catch (e) {\n      throw new UALWaxError_1.UALWaxError(e.message ? e.message : 'Could not login to the WAX Cloud Wallet', dist_1.UALErrorType.Login, e);\n    }\n  }\n  /**\n   * Logs the user out of the dapp. This will be strongly dependent on each Authenticator app's patterns.\n   */\n\n\n  async logout() {\n    this.initWaxJS();\n    this.users = [];\n    this.session = undefined;\n    localStorage.setItem('ual-wax:autologin', 'null');\n    console.log(`UAL-WAX: logout`);\n  }\n  /**\n   * Returns true if user confirmation is required for `getKeys`\n   */\n\n\n  requiresGetKeyConfirmation() {\n    return false;\n  }\n  /**\n   * Returns name of authenticator for persistence in local storage\n   */\n\n\n  getName() {\n    return 'wax';\n  }\n\n  receiveLogin(userAccount, pubKeys) {\n    if (!this.wax) {\n      return;\n    }\n\n    const login = {\n      // @ts-ignore\n      userAccount: userAccount || this.wax.userAccount,\n      // @ts-ignore\n      pubKeys: pubKeys || this.wax.pubKeys,\n      expire: Date.now() + this.shouldInvalidateAfter() * 1000\n    };\n\n    if (!login.userAccount || !login.pubKeys) {\n      return;\n    }\n\n    localStorage.setItem('ual-wax:autologin', JSON.stringify(login));\n    this.session = login;\n  }\n\n  initWaxJS() {\n    this.wax = new dist_2.WaxJS(this.getEndpoint(), undefined, undefined, false, this.apiSigner, this.waxSigningURL, this.waxAutoSigningURL);\n  }\n\n  getEndpoint() {\n    return `${this.chains[0].rpcEndpoints[0].protocol}://${this.chains[0].rpcEndpoints[0].host}:${this.chains[0].rpcEndpoints[0].port}`;\n  }\n\n}\n\nexports.Wax = Wax;","map":{"version":3,"sources":["/Users/kevinbadinger/eos/reactdemo/WCWReact/node_modules/@eosdacio/ual-wax/dist/Wax.js"],"names":["Object","defineProperty","exports","value","universal_authenticator_library_1","require","dist_1","dist_2","WaxUser_1","WaxIcon_1","UALWaxError_1","Wax","Authenticator","constructor","chains","options","users","initiated","apiSigner","waxSigningURL","waxAutoSigningURL","init","initWaxJS","wax","isAutoLoginAvailable","receiveLogin","data","JSON","parse","localStorage","getItem","expire","Date","now","userAccount","pubKeys","e","console","log","reset","undefined","session","isErrored","getOnboardingLink","getError","isLoading","getStyle","icon","WaxIcon","text","textColor","background","shouldRender","shouldAutoLogin","shouldRequestAccountName","shouldInvalidateAfter","login","length","UALWaxError","UALErrorType","Unsupported","Initialization","Error","WaxUser","message","Login","logout","setItem","requiresGetKeyConfirmation","getName","stringify","WaxJS","getEndpoint","rpcEndpoints","protocol","host","port"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst universal_authenticator_library_1 = require(\"universal-authenticator-library\");\nconst dist_1 = require(\"universal-authenticator-library/dist\");\nconst dist_2 = require(\"@waxio/waxjs/dist\");\nconst WaxUser_1 = require(\"./WaxUser\");\nconst WaxIcon_1 = require(\"./WaxIcon\");\nconst UALWaxError_1 = require(\"./UALWaxError\");\nclass Wax extends universal_authenticator_library_1.Authenticator {\n    constructor(chains, options) {\n        super(chains, options);\n        this.users = [];\n        this.initiated = false;\n        this.apiSigner = options && options.apiSigner;\n        this.waxSigningURL = options && options.waxSigningURL;\n        this.waxAutoSigningURL = options && options.waxAutoSigningURL;\n    }\n    /**\n     * Called after `shouldRender` and should be used to handle any async actions required to initialize the authenticator\n     */\n    async init() {\n        this.initWaxJS();\n        try {\n            if (this.wax) {\n                if (await this.wax.isAutoLoginAvailable()) {\n                    this.receiveLogin();\n                }\n                else {\n                    const data = JSON.parse(localStorage.getItem('ual-wax:autologin') || 'null');\n                    if (data && data.expire >= Date.now()) {\n                        this.receiveLogin(data.userAccount, data.pubKeys);\n                    }\n                }\n            }\n        }\n        catch (e) {\n            console.log('UAL-WAX: autologin error', e);\n        }\n        this.initiated = true;\n        console.log(`UAL-WAX: init`);\n    }\n    /**\n     * Resets the authenticator to its initial, default state then calls `init` method\n     */\n    reset() {\n        this.wax = undefined;\n        this.users = [];\n        this.initiated = false;\n        this.session = undefined;\n    }\n    /**\n     * Returns true if the authenticator has errored while initializing.\n     */\n    isErrored() {\n        return false;\n    }\n    /**\n     * Returns a URL where the user can download and install the underlying authenticator\n     * if it is not found by the UAL Authenticator.\n     */\n    getOnboardingLink() {\n        return 'https://all-access.wax.io/';\n    }\n    /**\n     * Returns error (if available) if the authenticator has errored while initializing.\n     */\n    getError() {\n        return null;\n    }\n    /**\n     * Returns true if the authenticator is loading while initializing its internal state.\n     */\n    isLoading() {\n        return !this.initiated;\n    }\n    /**\n     * Returns the style of the Button that will be rendered.\n     */\n    getStyle() {\n        return {\n            icon: WaxIcon_1.WaxIcon,\n            text: 'WAX Cloud Wallet',\n            textColor: 'white',\n            background: '#111111'\n        };\n    }\n    /**\n     * Returns whether or not the button should render based on the operating environment and other factors.\n     * ie. If your Authenticator App does not support mobile, it returns false when running in a mobile browser.\n     */\n    shouldRender() {\n        return true;\n    }\n    /**\n     * Returns whether or not the dapp should attempt to auto login with the Authenticator app.\n     * Auto login will only occur when there is only one Authenticator that returns shouldRender() true and\n     * shouldAutoLogin() true.\n     */\n    shouldAutoLogin() {\n        return false;\n    }\n    /**\n     * Returns whether or not the button should show an account name input field.\n     * This is for Authenticators that do not have a concept of account names.\n     */\n    async shouldRequestAccountName() {\n        return false;\n    }\n    /**\n     * Returns the amount of seconds after the authentication will be invalid for logging in on new\n     * browser sessions.  Setting this value to zero will cause users to re-attempt authentication on\n     * every new browser session.  Please note that the invalidate time will be saved client-side and\n     * should not be relied on for security.\n     */\n    shouldInvalidateAfter() {\n        return 86400;\n    }\n    /**\n     * Login using the Authenticator App. This can return one or more users depending on multiple chain support.\n     */\n    async login() {\n        console.log(`UAL-WAX: login requested`);\n        // Commented for now to support multiple wax chains such as testnets/staging in the future\n        // Mainnet check:  this.chains[0].chainId !== '1064487b3cd1a897ce03ae5b6a865651747e2e152090f99c1d19d44e01aea5a4'\n        if (this.chains.length > 1) {\n            throw new UALWaxError_1.UALWaxError('WAX Could Wallet only supports one WAX chain', dist_1.UALErrorType.Unsupported, null);\n        }\n        if (!this.wax) {\n            throw new UALWaxError_1.UALWaxError('WAX Cloud Wallet not initialized yet', dist_1.UALErrorType.Initialization, null);\n        }\n        try {\n            if (!this.session) {\n                await this.wax.login();\n                this.receiveLogin();\n            }\n            if (!this.session) {\n                throw new Error('Could not receive login information');\n            }\n            this.users = [\n                new WaxUser_1.WaxUser(this.chains[0], this.session.userAccount, this.session.pubKeys, this.wax)\n            ];\n            console.log(`UAL-WAX: login`, this.users);\n            return this.users;\n        }\n        catch (e) {\n            throw new UALWaxError_1.UALWaxError(e.message ? e.message : 'Could not login to the WAX Cloud Wallet', dist_1.UALErrorType.Login, e);\n        }\n    }\n    /**\n     * Logs the user out of the dapp. This will be strongly dependent on each Authenticator app's patterns.\n     */\n    async logout() {\n        this.initWaxJS();\n        this.users = [];\n        this.session = undefined;\n        localStorage.setItem('ual-wax:autologin', 'null');\n        console.log(`UAL-WAX: logout`);\n    }\n    /**\n     * Returns true if user confirmation is required for `getKeys`\n     */\n    requiresGetKeyConfirmation() {\n        return false;\n    }\n    /**\n     * Returns name of authenticator for persistence in local storage\n     */\n    getName() {\n        return 'wax';\n    }\n    receiveLogin(userAccount, pubKeys) {\n        if (!this.wax) {\n            return;\n        }\n        const login = {\n            // @ts-ignore\n            userAccount: userAccount || this.wax.userAccount,\n            // @ts-ignore\n            pubKeys: pubKeys || this.wax.pubKeys,\n            expire: Date.now() + this.shouldInvalidateAfter() * 1000\n        };\n        if (!login.userAccount || !login.pubKeys) {\n            return;\n        }\n        localStorage.setItem('ual-wax:autologin', JSON.stringify(login));\n        this.session = login;\n    }\n    initWaxJS() {\n        this.wax = new dist_2.WaxJS(this.getEndpoint(), undefined, undefined, false, this.apiSigner, this.waxSigningURL, this.waxAutoSigningURL);\n    }\n    getEndpoint() {\n        return `${this.chains[0].rpcEndpoints[0].protocol}://${this.chains[0].rpcEndpoints[0].host}:${this.chains[0].rpcEndpoints[0].port}`;\n    }\n}\nexports.Wax = Wax;\n"]},"metadata":{},"sourceType":"script"}